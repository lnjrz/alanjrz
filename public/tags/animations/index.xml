<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Animations on Alan Jrz</title>
    <link>http://localhost:1313/tags/animations/</link>
    <description>Recent content in Animations on Alan Jrz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/animations/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Worst Days of the Coronavirus Pandemic So Far</title>
      <link>http://localhost:1313/2020/03/31/corona-COVID-19-death-tolls-worst-day-so-far/</link>
      <pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2020/03/31/corona-COVID-19-death-tolls-worst-day-so-far/</guid>
      <description>&lt;style&gt;
p.small {
  line-height: 1.15;
  font-size:80%
}
&lt;/style&gt;
&lt;p&gt;&lt;strong&gt;Coronavirus SARS-CoV-2, COVID-19 or simply Corona—what started as an epidemic in China’s Hubei province has become a global pandemic, leading to hundreds of thousands of infections and thousands of deaths so far, national lockdowns and quarantines of cities, &lt;a href=&#34;https://twitter.com/hashtag/stayhome&#34;&gt;#stayhome&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/hashtag/flattenthecurve&#34;&gt;#flattenthecurve&lt;/a&gt; hashtags—and obviously a global shortage of toilet paper.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When the corona pandemic started, I felt scared, curious and tired at the same time. &lt;em&gt;Scared as a husband and father&lt;/em&gt; by the impact this virus outbreak &lt;strike&gt;might&lt;/strike&gt; is going to have on our life, in 2020 and way beyond. &lt;em&gt;Curious as a scientist&lt;/em&gt; who studies the spread and persistence of directly transmitted diseases in the context of contact rates and animal movement. And &lt;em&gt;tired as a data visualization specialist&lt;/em&gt; when I saw a lot of visualizations that were created by persons that neither had the knowledge nor the interest to produce accurate visualizations. Back then I decided against creating corona-related data visualizations for several reasons, some related to my mood, some to the uncertainty in data and the sheer mass of unimportant or misleading visualizations popping up everywhere. However, I have the feeling that the initial spread of misleading visualizations that either trigger panic or play down the risk is mainly over and we now have a lot of data and background knowledge to base our visualizations on. And, more importantly, I had an idea how to visualize and compare the death tolls among countries. (Also I had a reason to create an animation thanks to the &lt;a href=&#34;http://www.storytellingwithdata.com/blog/2020/3/2/swdchallenge-get-animated&#34;&gt;latest #SWDchallenge&lt;/a&gt;.)&lt;/p&gt;
&lt;h5 id=&#34;latest-updatejune-28-2020&#34;&gt;Latest Update:  June 28, 2020&lt;/h5&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Z3tt/Corona-Worst-Days/master/plots/corona_heat_begin.gif&#34; alt=&#34;latest-corona-animation&#34; style=&#34;width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://raw.githubusercontent.com/Z3tt/Corona-Worst-Days/master/plots/corona_heat_begin.gif&#39;, &#39;blank&#39;);&#34;/&gt;
&lt;figcaption&gt;Latest animation of daily death tolls relative to the &#34;worst day&#34; so far, sorted by the day of the first reported death due to COVID-19.&lt;/figcaption&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Z3tt/Corona-Worst-Days/master/plots/corona_heat_trend_latest_1.png&#34; alt=&#34;latest-corona-plot&#34; style=&#34;width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://raw.githubusercontent.com/Z3tt/Corona-Worst-Days/master/plots/corona_heat_trend_latest_1.png&#39;, &#39;blank&#39;);&#34;/&gt;
&lt;figcaption&gt;A static visualization showing the latest data, sorted by time since the &#34;worst day&#34;.&lt;/figcaption&gt;
&lt;h5 id=&#34;new-chart-trajectories&#34;&gt;New Chart: Trajectories&lt;/h5&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Z3tt/Corona-Worst-Days/master/plots/corona_trajectory_facet_1.png&#34; alt=&#34;latest-corona-line-plot&#34; style=&#34;width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://raw.githubusercontent.com/Z3tt/Corona-Worst-Days/master/plots/corona_trajectory_facet_1.png&#39;, &#39;blank&#39;);&#34;/&gt;
&lt;figcaption&gt;The same data as 7-day rolling average as trajectories, showing worst days, death tolls and latest trends per country.&lt;/figcaption&gt;
&lt;h5 id=&#34;new-animation-tile-map&#34;&gt;New Animation: Tile Map&lt;/h5&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Z3tt/Corona-Worst-Days/master/plots/corona_map.gif&#34; alt=&#34;latest-corona-line-plot&#34; style=&#34;width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://raw.githubusercontent.com/Z3tt/Corona-Worst-Days/master/plots/corona_map.gif&#39;, &#39;blank&#39;);&#34;/&gt;
&lt;figcaption&gt;The animated heatmap as tile map showing the global pattern of worst days calculated as 7-day rolling average.&lt;/figcaption&gt;
&lt;h3 id=&#34;the-idea&#34;&gt;The Idea&lt;/h3&gt;
&lt;p&gt;Inspired by my colleague &lt;a href=&#34;https://twitter.com/alexcourtiol&#34;&gt;Alexandre Courtiol&lt;/a&gt;, who looked at &lt;a href=&#34;https://github.com/courtiol/excess_mortality_COVID19&#34;&gt;the worst day on a country-level by visualizing the deaths due to COVID-19 adjusted for baseline mortality and population size&lt;/a&gt;, I decided to highlight where each country falls along the wave. While his plot reveals some interesting patterns, I aimed for a timeline to reveal the temporal trends. Particularly, I wanted to highlight the relativity of the feeling &amp;ldquo;today is the worst day&amp;rdquo; and also the &lt;em&gt;current&lt;/em&gt; trends, either today or a week ago—are we already over the (first) wave or can we expect more and more deaths in the next days? So I decided to take a different approach by calculating the number of daily deaths relative to the worst day on both the global and the country level.&lt;/p&gt;
&lt;img src=&#34;http://localhost:1313/img/dataviz-posts/SWD_2020_03_Animation_corona_sum.gif&#34; alt=&#34;animation-corona-original&#34; style=&#34;width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/SWDchallenge/SWD_2020_03_Animation_corona_sum.gif, &#39;blank&#39;);&#34;/&gt;
&lt;figcaption&gt;The first version with data until the 29th of March that I submitted as my contribution to the &lt;a href=&#34;https://community.storytellingwithdata.com/challenges/ed4eaf73-f659-4f41-b7ec-58396809a907/95f2ba49-12ee-4ea0-951c-ce4ba394ff7b&#34;&gt;#SWDchallenge&lt;/a&gt;.&lt;/figcaption&gt;
&lt;img src=&#34;http://localhost:1313/img/dataviz-posts/SWD_2020_03_Animation_corona_begin.png&#34; alt=&#34;static-plot-corona-original&#34; style=&#34;width: 100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/SWDchallenge/SWD_2020_03_Animation_corona_begin.png&#39;, &#39;blank&#39;);&#34;/&gt;
&lt;figcaption&gt;A static version of the situation as of 29th of March with countries sorted by first reported death.&lt;/figcaption&gt;
&lt;h3 id=&#34;how-to-read-the-visualization&#34;&gt;How to Read the Visualization&lt;/h3&gt;
&lt;p&gt;As explained above, I calculated for each day the number of death cases relative to the &amp;ldquo;worst day&amp;rdquo;, namely the day with the most reported deaths so far. Imagine a naïve population that was not facing the virus before. At some point, there might be individuals dying but likely only a few (with regard to COVID-19—in general, this depends on the severity of the infection caused by the pathogen, often referred to as &lt;em&gt;case fatality ratio&lt;/em&gt; or simply &lt;em&gt;case fatality&lt;/em&gt;). Consequently, the proportion of deaths on the first day compared to the worst day has to be 100% (since the first day is, by definition, the worst day so far). On the next day, there might be more deaths than on the day before, a known pattern we see in reality and in simulations of early epidemics. Exponential growth, an always increasing curve we aim to flatten by reducing contact between infected and susceptible (individuals that are not infected but able to catch the infection). So on day two, two times as many individuals might die which makes the second day the worst day with a proportion of 100%. At the same time, the proportion of deaths on day one decreases from 100% to 50%. This way of transforming the data enables to see if we are still facing (exponential) growth or if we, at least for now, over the peak if deaths.&lt;/p&gt;
&lt;h3 id=&#34;things-to-keep-in-mind-when-visualizing-covid-19-data&#34;&gt;Things to Keep in Mind When Visualizing COVID-19 Data&lt;/h3&gt;
&lt;p&gt;In the recent weeks, there is a lot of discussion on several things to account for when analyzing data and designing visualizations on the topic of the corona pandemic.&lt;/p&gt;
&lt;h5 id=&#34;make-design-choices-carefully&#34;&gt;Make Design Choices Carefully&lt;/h5&gt;
&lt;p&gt;First of all, the final visualization should be as precise and transparent as possible. (Of course, this should be the case for all visualizations!) This means that the final product should be designed with care by adding the source of data, how the data was aggregated and analyzed, and what the visualization shows. Further, this implies a careful choice of text, especially the title, and the colors which should both neither be hysteric nor play down the current situation. For example, the &lt;a href=&#34;https://blog.datawrapper.de/coronaviruscharts/&#34;&gt;use of bloodish colors&lt;/a&gt; to &lt;a href=&#34;https://twitter.com/visualisingdata/status/1237276833286103045&#34;&gt;make it crystal-clear that this virus is deadly&lt;/a&gt; might spark panic in some people. If this is an intended choice, this is &lt;a href=&#34;https://twitter.com/AlbertoCairo/status/1241374480351576064&#34;&gt;professional malpractice and must be called out by us as data visualization specialists&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id=&#34;gain-knowledge-contact-experts-check-your-facts&#34;&gt;Gain Knowledge, Contact Experts, Check Your Facts&lt;/h5&gt;
&lt;p&gt;In the early days of the global pandemic, the intention of a particular graphic was often not clear to the reader. Also, I hardly could tell if the designer has the knowledge to analyze and visualize the data in a meaningful way (no, &lt;a href=&#34;https://twitter.com/CT_Bergstrom/status/1241522140559503360&#34;&gt;you are not an expert in pathogen spread when you&amp;rsquo;re investigating market sales!&lt;/a&gt;) or contacted any experts when preparing the chart. To cite Alberto Cairo, knight chair in visual journalism at the University of Miami: &lt;a href=&#34;https://twitter.com/AlbertoCairo/status/1241371617680293888&#34;&gt;&amp;ldquo;Numbers without domain knowledge are dangerous&amp;rdquo;&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/AlbertoCairo/status/1241386040570626048&#34;&gt;&amp;ldquo;the rule should be to ignore &lt;strong&gt;any&lt;/strong&gt; analysis from people who haven&amp;rsquo;t consulted with epidemiologists/biostatisticians&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id=&#34;be-explicit-about-uncertainty&#34;&gt;Be Explicit About Uncertainty&lt;/h5&gt;
&lt;p&gt;The data we read about and see in the news and our social media streams come with a lot of uncertainty. It is very important to understand that detected or confirmed cases do not necessarily reflect the reality but underestimate the real number of cases—and to communicate this fact explicitly in the visualization. The number of detected persons with an infection depends on the number of tests that were performed—and that &lt;a href=&#34;https://ourworldindata.org/covid-testing&#34;&gt;differs a lot among countries&lt;/a&gt;! A more robust measure might be deaths due to the coronavirus but keep in mind that the way to report these numbers differs between countries. Furthermore, &lt;a href=&#34;https://edition.cnn.com/2020/03/26/health/number-of-cases-testing-data-intl/index.html&#34;&gt;no two countries are alike when it comes to access to healthcare and medical resources and even the age structure of the population&lt;/a&gt; which in turn influences the number of reported cases.&lt;/p&gt;
&lt;p&gt;Since we are still in the early days of the coronavirus pandemic, correlations with any variable such as temperature or cultural differences need to be treated with caution. Do not release any of such analyses or visualizations if you are not sure what you are doing and did your best to account for any biases. There are experts for this and they are already searching for correlations with the right tools and knowledge.&lt;/p&gt;
&lt;h5 id=&#34;do-i-need-to-adjust-for-population&#34;&gt;Do I Need to Adjust for Population?&lt;/h5&gt;
&lt;p&gt;There is a ongoing discussion of &lt;a href=&#34;https://twitter.com/jburnmurdoch/status/1242904596856614912&#34;&gt;&amp;ldquo;showing the raw numbers&amp;rdquo; versus &amp;ldquo;adjust data for population&amp;rdquo;&lt;/a&gt;. As John Burn-Murdoch—data visualization designer at the Financial Times and creator of &lt;a href=&#34;https://www.ft.com/coronavirus-latest&#34;&gt;these fantastic and very informative visualizations on the current situation of the corona spread&lt;/a&gt;—states: &lt;a href=&#34;https://twitter.com/jburnmurdoch/status/1242904703144464390&#34;&gt;&amp;ldquo;Generally, and especially early in outbreak (first few weeks), higher per-capita numbers just mean smaller country, not anything different about how that country’s dealing with covid&amp;rdquo;&lt;/a&gt;. Of course, &lt;em&gt;population density&lt;/em&gt; matters since the coronavirus is transmitted by direct or close contact. However, &lt;em&gt;population size&lt;/em&gt; does not necessarily reflect the density in a country. So if accounting for population, this should be optimally done on a regional level sufficient to capture the area of spread instead of borders drawn by influential humans. In the end, it also depends on the story you want to tell if and how you adjust the data. There are also other ways to adjust the data such as those which two ways &lt;a href=&#34;https://github.com/courtiol/excess_mortality_COVID19&#34;&gt;Alexandre&lt;/a&gt; and I have chosen.&lt;/p&gt;
&lt;h5 id=&#34;should-i-use-a-logarithmic-axis&#34;&gt;Should I Use a Logarithmic Axis?&lt;/h5&gt;
&lt;p&gt;Furthermore, the use of logarithmic axes is another ongoing discussion. Since the initial growth is likely exponential in case of directly transmitted diseases—and this is what we see with the coronavirus as well—a logarithmic scale &lt;a href=&#34;https://twitter.com/jburnmurdoch/status/1237748598051409921&#34;&gt;&amp;ldquo;is the natural way to track the spread&amp;rdquo;&lt;/a&gt;. While I would not name it the &lt;em&gt;natural&lt;/em&gt; way, it is true that such a transformation helps to understand the dynamics and makes (some) comparisons more easy. But again, the choice depends on the picture you want to draw: when turning the y axis into a logarithmic one as John did, &lt;a href=&#34;https://twitter.com/jburnmurdoch/status/1237749654281912321&#34;&gt;&amp;ldquo;readers now only have to draw a straight line in their head to see if two countries are one the same path&amp;rdquo;&lt;/a&gt;. While with this transformation it might be easier to compare countries there might be disadvantages: the reader needs to realize and understand the logarithmic axis and small differences might be underestimated which are in reality much higher than some might think.&lt;/p&gt;
&lt;h3 id=&#34;benefits-and-caveats-of-the-visualization&#34;&gt;Benefits and Caveats of the Visualization&lt;/h3&gt;
&lt;p&gt;By calculating the proportion of deaths per country, I avoid some of the issues with current visualizations on the COVID-19 topic:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I use the &lt;strong&gt;number of deaths&lt;/strong&gt; which is, compared to positive cases, &lt;a href=&#34;https://graphics.reuters.com/HEALTH-CORONAVIRUS/CASUALTIES/gjnpwjmqvwr/&#34;&gt;a more reliable measure&lt;/a&gt;. Using numbers of deaths due to COVID-19 minimizes the difference in testing rates which vary a lot between countries. Though, we have to keep in mind that countries also have been reported to classify &amp;ldquo;death due to COVID-19&amp;rdquo; in different ways and might be underreported. Also, it is known that the risk of dying due to an infection with COVID-19 depends on the age, and thus a country&amp;rsquo;s demography plays a role as well. All this may make a comparison between countries difficult. However, by just looking at the numbers per country, every comparison is made with the same standards which do not differ within countries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There was &lt;strong&gt;no need to perform any logarithmic transformation&lt;/strong&gt; to reveal the pattern since, again, we compare the absolute numbers per country not between countries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By &lt;strong&gt;scaling death tolls by country&lt;/strong&gt;, the visualization accounts for different population sizes and states of the epidemic which enables us to compare them more easily.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each country has its on row which helps to see a clear pattern for each country without dealing with overplotting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The evolving patterns mimics the way we have experienced and are experiencing the pandemic. I found it very interesting to look at the &lt;strong&gt;change in a dynamic way&lt;/strong&gt; since values that look very high today might be low in a few days depending on the trend. This way the animations mimics us humans and how we see the situation without making any claims about how the numbers will change in the next days. You can also &lt;em&gt;ride the wave&lt;/em&gt; and wait for the new colors to be not pink anymore.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To be transparent that the highest color does not show daily cases but a calculated measure, I have added both the number of daily deaths for each country&amp;rsquo;s worst day and the latest day as well as the sum of deaths next to each country&amp;rsquo;s name.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But there might be also some drawbacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The sheer number of cases is not the main focus but added as numbers for the worst days and the latest day.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is easier to see trends of particular countries. However, a comparison of many waves in detail might be difficult for countries that are not plotted next to each other.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I might run out of space soon&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-to-create-the-visualization&#34;&gt;How to Create the Visualization?&lt;/h3&gt;
&lt;p&gt;The data is made available by the Johns Hopkins University Center for Systems Science and Engineering (CSSE) and can be downloaded via &lt;a href=&#34;https://datahub.io/core/covid-19&#34;&gt;datahub.io&lt;/a&gt;.&lt;br&gt;
You can find the codes for my submission to the &lt;a href=&#34;https://community.storytellingwithdata.com/challenges/ed4eaf73-f659-4f41-b7ec-58396809a907/95f2ba49-12ee-4ea0-951c-ce4ba394ff7b&#34;&gt;SWDchallenge&lt;/a&gt; showing the death tolls until the 29th of March in my corresponding &lt;a href=&#34;https://github.com/Z3tt/SWDchallenge&#34;&gt;GitHub repository&lt;/a&gt;. The code for the latest visualization are uploaded to this &lt;a href=&#34;https://github.com/Z3tt/Corona-Daily-Deaths-Animation&#34;&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing Temperatures in Berlin with Bar Chart Races</title>
      <link>http://localhost:1313/2019/09/17/bar-chart-race-temperatures-berlin/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2019/09/17/bar-chart-race-temperatures-berlin/</guid>
      <description>&lt;p style=&#34;font-size:14px&#34;&gt;Header image by &lt;a href=&#34;https://www.instagram.com/richard.strozynski/?hl=en&#34;&gt;Richard Strozynski&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;sunday&#34;&gt;Sunday&lt;/h4&gt;
&lt;p&gt;Two days ago, I was sitting in the sun with a friend working in &lt;em&gt;UX and Graphic Design&lt;/em&gt;, chatting about DataViz:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;She: &amp;ldquo;Oh man, last week we had one customer asking for a bar chart race. Do you know these?&amp;rdquo;&lt;br&gt;
&lt;br&gt;
Me: &amp;ldquo;Yes&amp;hellip; They are literally EVERYWHERE &lt;a href=&#34;#section1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&amp;rdquo;.&lt;p id=&#34;back1&#34;&gt;&lt;/p&gt;
&lt;br&gt;
She: &amp;ldquo;Yeah, and we had some tough time to make that work and to customize it in Adobe Animate.&amp;rdquo;&lt;br&gt;
&lt;br&gt;
Me: &amp;ldquo;&amp;hellip;&amp;rdquo;&lt;br&gt;
&lt;br&gt;
She: &amp;ldquo;&amp;hellip; and I wondered if you could have done this in R?&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Of course, one can! And especially, looping through design choices with a customer regarding colors, fonts, size and also simply to map the relevant data to a bar plot is so much easier.&lt;/p&gt;
&lt;p&gt;I mean, they have &lt;em&gt;drawn each bar separately&lt;/em&gt; during their progress which took them hours to do!&lt;/p&gt;
&lt;p&gt;To demonstrate the capability of R, I immediately sat down after the family went to bed and copied the &lt;a href=&#34;https://github.com/amrrs/animated_bar_charts_in_R&#34;&gt;example provided by Abdul Majed Raja&lt;/a&gt; using the great &lt;a href=&#34;https://gganimate.com/&#34;&gt;&lt;code&gt;{gganimate}&lt;/code&gt; 📦&lt;/a&gt; (what else?!) by &lt;a href=&#34;https://www.data-imaginist.com/about/&#34;&gt;Thomas Lin Pedersen&lt;/a&gt; (who else?!) to create a smooth and colorful bar chart race with some &lt;em&gt;own&lt;/em&gt; data.&lt;/p&gt;
&lt;p&gt;I am playing around with Berlin weather data from the &lt;a href=&#34;https://www.dwd.de/DE/leistungen/klimadatendeutschland/klarchivtagmonat.html&#34;&gt;DWD (Deutscher Wetterdienst)&lt;/a&gt; for a few days now—for example &lt;a href=&#34;https://twitter.com/CedScherer/status/1170674809983905792&#34;&gt;my contribution to the #SWDchallenge on &amp;ldquo;Visualizing Uncertainty&amp;rdquo;&lt;/a&gt;—so this was an easy choice. I created the &lt;a href=&#34;https://twitter.com/jburnmurdoch/status/1107552367795412992?lang=en&#34;&gt;usual bar chart race as introduced by John Burn-Murdoch&lt;/a&gt; visualizing the daily maximum temperature in Berlin-Dahlem (one of many stations in Berlin), averaged for each month. 15 to 30 minutes later (okay, add one more hour for playing around with different time periods and frame rates) I was very happy  about this gif:
&lt;img src=&#34;http://localhost:1313/img/bar-races/dwd_anim_max_viridis_short.gif&#34; alt=&#34;GIF Chart Race Maximum Temperatures (viridis)&#34;&gt;&lt;/p&gt;
&lt;p&gt;Even though I love the &lt;a href=&#34;https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html&#34;&gt;viridis color palettes&lt;/a&gt; and they are my default color choice (here: option &lt;code&gt;inferno&lt;/code&gt; because it fits the topic), I gave it another try. The &lt;a href=&#34;https://github.com/thomasp85/scico&#34;&gt;&lt;code&gt;{scico}&lt;/code&gt; 📦&lt;/a&gt; is another great color palette package, again maintained by Thomas Lin Pedersen, and there is one particular palette that couldn&amp;rsquo;t match my animation better - it&amp;rsquo;s blue-redish and called &lt;strong&gt;berlin&lt;/strong&gt;!
&lt;img src=&#34;http://localhost:1313/img/bar-races/dwd_anim_max_scico_short.gif&#34; alt=&#34;GIF Chart Race Maximum Temperatures (scico)&#34;&gt;&lt;/p&gt;
&lt;p&gt;It was already late and I had to stop. I&amp;rsquo;ve mailed her the animations and while going to bed, I was already thinking about other cool stuff one could use a bar chart race for in this context.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monday&#34;&gt;Monday&lt;/h4&gt;
&lt;p&gt;In the morning, on my way to work, I coded an unusual bar chart race (or maybe it doesn&amp;rsquo;t even fit this definition any more?) showing the difference of monthly average temperatures to the 1951–1980 period, and thus both positive and negative values. While showing the general seasonal pattern in the northern hemisphere with summer months being warmer and winter months being colder than average, this illustrates nicely increasing temperatures in more recent years during the summer months and also in spring and autumn:
&lt;img src=&#34;http://localhost:1313/img/bar-races/dwd_anim_diff_yrs_short.gif&#34; alt=&#34;GIF Chart Race Difference Temperatures (years)&#34;&gt;&lt;/p&gt;
&lt;p&gt;I again depicted only the period from 1980 until now since the animation became too long&lt;a href=&#34;#section2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;p id=&#34;back2&#34;&gt;&lt;/p&gt;
To visualize the trend over the whole period (1876–2018), I decided to group the data per decade (to do so in R with &lt;code&gt;{dplyr}&lt;/code&gt; use: &lt;code&gt;mutate(decade = year %/% 10 * 10)&lt;/code&gt;) and visualize the difference in average monthly temperatures:&lt;br&gt;
&lt;img src=&#34;http://localhost:1313/img/bar-races/dwd_anim_diff_dec.gif&#34; alt=&#34;GIF Chart Race Difference Temperatures (decades)&#34;&gt;&lt;/p&gt;
&lt;p&gt;Finally, so that the locals can understand it too, I&amp;rsquo;ve created a version in German:
&lt;img src=&#34;http://localhost:1313/img/bar-races/dwd_anim_diff_dec_ger.gif&#34; alt=&#34;GIF Chart Race Temperaturunterschiede (Dekaden)&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;tuesday&#34;&gt;Tuesday&lt;/h4&gt;
&lt;p&gt;So, now I am sitting here watching bar chart races on my laptop in various forms, colors, languages, and time periods.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Me: Wow, it&amp;rsquo;s amazing what you can do with R! And how easy it is.&lt;br&gt;
&lt;br&gt;
Also me: Next time, my friend&amp;rsquo;s agency hopefully contacts someone who knows how to use R and data visualization (me!) to make reproducible, publication-ready bar chart races (or any other DataViz)!&lt;/p&gt;
&lt;p id=&#34;back3&#34;&gt;&lt;br&gt;
&lt;/p&gt;Also me: Maybe I should jump on the hype train before it&#39;s gone&lt;a href=&#34;#section3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; and write a blog post.&lt;/blockquote&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h5 id=&#34;footnotes&#34;&gt;&lt;em&gt;Footnotes&lt;/em&gt;&lt;/h5&gt;
&lt;p id=&#34;section1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt; see for example: the &lt;a href=&#34;https://twitter.com/jburnmurdoch/status/1107552367795412992?lang=en&#34;&gt;already famous bar chart race from John Burn-Murdoch&lt;/a&gt;, the &lt;a href=&#34;https://twitter.com/JonTheGeek/status/1172259966260064258&#34;&gt;#TidyTuesday contribution by Jon &#39;The Geek&#39; Harmon&lt;/a&gt;, a &lt;a href=&#34;https://www.youtube.com/watch?v=Qvz6xEkSp94&#34;&gt;bar chart race about the popularity of bar chart races on Reddit&lt;/a&gt; and the &lt;a href=&#34;https://twitter.com/bizweekgraphics/status/1169232409767886848&#34;&gt;&#34;Bar Chart Race of Bart Chart Races&#34;&lt;/a&gt;.   &lt;a href=&#34;#back1&#34;&gt;&lt;i&gt;Go back&lt;/i&gt; ↑&lt;/a&gt;&lt;/p&gt;
&lt;p id=&#34;section2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt; Here is the long version showing monthly average temperatures for all years (1876–2018):&lt;/a&gt;&lt;/p&gt;
&lt;img src=&#34;http://localhost:1313/img/bar-races/dwd_anim_max_scico_long_fast.gif&#34; alt=&#34;GIF Chart Race Maximum Temperatures (all years)&#34;&gt;
&lt;p&gt;&amp;hellip; and differences in monthly temperatures to the 1951-1980 average:
&lt;img src=&#34;http://localhost:1313/img/bar-races/dwd_anim_diff_yrs_long.gif&#34; alt=&#34;GIF Chart Race Difference Temperatures (all years)&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#back2&#34;&gt;&lt;i&gt;Go back&lt;/i&gt; ↑&lt;/a&gt;&lt;/p&gt;
&lt;p id=&#34;section3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt; Probably I am already too late to catch that train... &lt;a href=&#34;#back3&#34;&gt;&lt;i&gt;Go back&lt;/i&gt; ↑&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Evolution of a ggplot</title>
      <link>http://localhost:1313/2019/05/17/the-evolution-of-a-ggplot/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2019/05/17/the-evolution-of-a-ggplot/</guid>
      <description>


&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/evol-ggplot/evol-ggplot-1.gif&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;aim&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;🏁 Aim of this Tutorial&lt;/h3&gt;
&lt;p&gt;In this blog post, I aim to show you how to turn a default ggplot into a plot that visualizes information in an appealing and easily understandable way. The goal is to provide a step-by-step tutorial explaining how my visualization evolves from a typical basic ggplot. All plots are created with 100% &lt;code&gt;{ggplot2}&lt;/code&gt; and 0% Inkscape.&lt;/p&gt;
&lt;p&gt;We are going to transform a basic box plot into a compelling and self-explanatory combination of a jittered dot strip plot and a lollipop plot. I am going to use &lt;a href=&#34;http://data.uis.unesco.org/index.aspx?queryid=180&#34;&gt;data provided by the UNESCO on global student to teacher ratios&lt;/a&gt; that was selected as data &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-05-07&#34;&gt;for the #TidyTuesday challenge 19 of 2019&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#data&#34;&gt;🗃️ Data Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#default&#34;&gt;🌱 The Default Boxplot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sort&#34;&gt;🔀 ️Sort Your Data!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#polish&#34;&gt;💎 Let Your Plot Shine—Get Rid of the Default Settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#geoms&#34;&gt;📊 The Choice of the Chart Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#more&#34;&gt;💯 More Geoms, More Fun, More Info!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#text&#34;&gt;💬 Add Text Boxes to Let The Plot Speak for Itself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;%7B#legend&#34;&gt;🗺️ Bonus: Add a Tile Map as Legend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#final&#34;&gt;🎄 The Final Evolved Visualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#code&#34;&gt;💻 Complete Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ps&#34;&gt;📝 Post Scriptum: Mean versus Median&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;🗃️ Data Preparation&lt;/h3&gt;
&lt;p&gt;I have prepared the data in the first way to map each country’s most recently reported student-teacher ratio in primary education as a tile map. I used the &lt;a href=&#34;%22https://gist.githubusercontent.com/maartenzam/787498bbc07ae06b637447dbd430ea0a/raw/9a9dafafb44d8990f85243a9c7ca349acd3a0d07/worldtilegrid.csv%22&#34;&gt;tile-based world data provided by Maarten Lambrechts&lt;/a&gt; to create this map as the first visualization for my weekly contribution:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/map-students-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For the second chart next to the tile map, I wanted to highlight the difference of the mean student ratio per continent but without discarding the raw data on the country-level. Therefore, I transformed the information on the region to represent the six continents excluding Antarctica (hm, do penguins not go to school?! Seems so… 🐧) and merged both data sets. If you would like to run the code yourself, you find the data preparation steps &lt;a href=&#34;https://gist.github.com/Z3tt/301bb0c7e3565111770121af2bd60c11&#34;&gt;here&lt;/a&gt;. This is how the relevant columns of the merged and cleaned data set looks like, showing two examples per continent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 12 × 5
##    indicator         country                          region        student_ratio student_ratio_region
##    &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;                            &amp;lt;chr&amp;gt;                 &amp;lt;dbl&amp;gt;                &amp;lt;dbl&amp;gt;
##  1 Primary Education Lesotho                          Africa                 32.9                 37.3
##  2 Primary Education South Africa                     Africa                 30.3                 37.3
##  3 Primary Education Bangladesh                       Asia                   30.1                 20.7
##  4 Primary Education Viet Nam                         Asia                   19.6                 20.7
##  5 Primary Education Ireland                          Europe                 16.1                 13.6
##  6 Primary Education France                           Europe                 18.2                 13.6
##  7 Primary Education Saint Vincent and the Grenadines North America          14.4                 17.7
##  8 Primary Education Dominican Republic               North America          18.9                 17.7
##  9 Primary Education Vanuatu                          Oceania                26.6                 24.7
## 10 Primary Education Solomon Islands                  Oceania                25.8                 24.7
## 11 Primary Education Argentina                        South America          NA                   19.4
## 12 Primary Education Paraguay                         South America          24.2                 19.4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;default&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;🌱 The Default Boxplot&lt;/h3&gt;
&lt;p&gt;I was particularly interested to visualize the most-recent student-teacher ratio in primary education as a tile grid map per country. A usual way representing several data points per group is to use a box plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

ggplot(df_ratios, aes(x = region, y = student_ratio)) +
  geom_boxplot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/boxplot-basic-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sort&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;🔀 ️Sort Your Data!&lt;/h3&gt;
&lt;p&gt;A good routine with such kind of data (qualitative and unsorted) is to arrange the box plots or any other type such as bars or violins in an in- or decreasing order to simplify readability. Since the category “continent” does not have an intrinsic order, I rearrange the box plots by their mean student-teacher ratio instead of sorting them alphabetically which is the default:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_sorted &amp;lt;-
  df_ratios %&amp;gt;%
  mutate(region = fct_reorder(region, -student_ratio_region))

ggplot(df_sorted, aes(x = region, y = student_ratio)) +
  geom_boxplot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/boxplot-sorted-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;Sort your data according to the best or worst, highest or lowest value to make your graph easily readable—do not sort them if the categories have an internal logical ordering, e.g. age groups or income classes!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To increase the readability we are going to flip the coordinates (note that we could also switch the variables mapped to x and y in the &lt;code&gt;ggplot&lt;/code&gt; call &lt;s&gt;but this does not work for box plots so we use &lt;code&gt;coord_flip()&lt;/code&gt;&lt;/s&gt; and it now also works for box plots!). As some ratios are pretty close to zero, it might be also a good idea to include the 0 on the y axis. I also add some space to the right (mostly for later) which we can force by adding &lt;code&gt;scale_y_continuous(limits = c(0, 90))&lt;/code&gt; (be cautious here to use limits that are beyond the limits of your data—or better use &lt;code&gt;coord_*(ylim = c(0, 90)&lt;/code&gt; so you’re not accidentally subsetting your data).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(df_sorted, aes(x = region, y = student_ratio)) +
  geom_boxplot() +
  coord_flip() +
  scale_y_continuous(limits = c(0, 90))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/boxplot-flipped-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;Flip the chart in case of long labels to increase readability and to avoid overlapping or rotated labels!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;Since the latest version 3.x.x of &lt;code&gt;{ggplot2}&lt;/code&gt; you can also flip the orientation by switching the x and y variables:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(df_sorted, aes(x = student_ratio, y = region)) +
  geom_boxplot() +
  scale_x_continuous(limits = c(0, 90))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The order of the categories is perfect as it is after flipping the coordinates—the lower the student-teacher ratio, the better.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;let-your-plot-shineget-rid-of-the-default-settings&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;💎 Let Your Plot Shine—Get Rid of the Default Settings&lt;/h3&gt;
&lt;p&gt;Let’s spice this plot up! One great thing about &lt;code&gt;{ggplot2}&lt;/code&gt; is that it is structured in an &lt;em&gt;adaptive way&lt;/em&gt;, allowing to add further levels to an existing ggplot object. We are going to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use a different theme that comes with the &lt;code&gt;{ggplot2}&lt;/code&gt; package by calling &lt;code&gt;theme_set(theme_light())&lt;/code&gt; (several themes come along with the &lt;code&gt;{ggplot2}&lt;/code&gt; package but if you need more check for example the packages &lt;a href=&#34;https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/&#34;&gt;&lt;code&gt;{ggthemes}&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://hrbrmstr.github.io/hrbrthemes/&#34;&gt;&lt;code&gt;hrbrthemes&lt;/code&gt;&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;change the font and the overall font size by adding the arguments &lt;code&gt;base_size&lt;/code&gt; and &lt;code&gt;base_family&lt;/code&gt; to &lt;code&gt;theme_light()&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;flip the axes by adding &lt;code&gt;coord_flip()&lt;/code&gt; (as seen before),&lt;/li&gt;
&lt;li&gt;let the axis start at 0 and reduce the spacing to the plot margin by adding &lt;code&gt;expand = c(0.02, 0.02)&lt;/code&gt; as argument to the &lt;code&gt;scale_y_continious()&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;add some color encoding the continent by adding &lt;code&gt;color = region&lt;/code&gt; to the &lt;code&gt;aes&lt;/code&gt; argument and picking a palette from the &lt;a href=&#34;https://cran.r-project.org/web/packages/ggsci/vignettes/ggsci.html&#34;&gt;&lt;code&gt;{ggsci}&lt;/code&gt; package&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;add meaningful labels/removing useless labels by adding &lt;code&gt;labs(x = NULL, y = &#34;title y&#34;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;adjust the new theme (e.g. changing some font settings and removing the legend and grid) by adding &lt;code&gt;theme()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;💡 &lt;strong&gt;You can easily adjust all sizes of the theme by calling &lt;code&gt;theme_*(base_size = )&lt;/code&gt;—this is very handy if you need the same viz for a different purpose!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;Do not use &lt;code&gt;c(0, 0)&lt;/code&gt; since the zero tick is in most cases too close to the axis—use something close to zero instead!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I am going to save the ggplot call and all these visual adjustments in a &lt;code&gt;gg&lt;/code&gt; object that I name &lt;code&gt;g&lt;/code&gt; so we can use it for the next plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;theme_set(theme_light(base_size = 18, base_family = &amp;quot;Poppins&amp;quot;))

g &amp;lt;-
  ggplot(df_sorted, aes(x = region, y = student_ratio, color = region)) +
    coord_flip() +
    scale_y_continuous(limits = c(0, 90), expand = c(0.02, 0.02)) +
    scale_color_uchicago() +
    labs(x = NULL, y = &amp;quot;Student to teacher ratio&amp;quot;) +
    theme(
      legend.position = &amp;quot;none&amp;quot;,
      axis.title = element_text(size = 16),
      axis.text.x = element_text(family = &amp;quot;Roboto Mono&amp;quot;, size = 12),
      panel.grid = element_blank()
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even thought we already wrote a lot of code, the plot &lt;code&gt;g&lt;/code&gt; is just an empty plot until with a custom theme and pretty axes but actually not a “data visualization” yet.&lt;/p&gt;
&lt;p&gt;(Note that to include these fonts we make use of the &lt;s&gt;&lt;a href=&#34;https://github.com/wch/extrafont&#34;&gt;&lt;code&gt;{extrafont}&lt;/code&gt; package&lt;/a&gt;&lt;/s&gt; &lt;s&gt;&lt;a href=&#34;https://github.com/yixuan/showtext&#34;&gt;&lt;code&gt;{showtext}&lt;/code&gt; package&lt;/a&gt;&lt;/s&gt; &lt;a href=&#34;https://cran.r-project.org/web/packages/systemfonts/index.html&#34;&gt;{systemfonts} package&lt;/a&gt;. This package allows for the use of system fonts without the need to import or register fonts. And it even allows to use various font weights and styles, to turn on ligatures and much more. You need to have (a) the fonts installed on your system and (b) the package &lt;code&gt;systemfonts&lt;/code&gt; installed. Read more about how to use custom fonts in &lt;a href=&#34;https://yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts/&#34;&gt;this blog post by June Choe&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;geoms&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;📊 The Choice of the Chart Type&lt;/h3&gt;
&lt;p&gt;We can add any &lt;code&gt;geom_&lt;/code&gt; to our ggplot-preset &lt;code&gt;g&lt;/code&gt; that fits the data, i.e. that take two positional variables of which one is allowed to be qualitative. Here are some examples that fulfill these criteria:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/geoms-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;All of the four chart types let readers explore the range of values but with different detail and focus. The box plot and the violin plot both summarize the data, they contain a lot of information by visualizing the distribution of the data points in two different ways (see below for an explanation &lt;a href=&#34;https://www.cedricscherer.com/2019/05/17/the-evolution-of-a-ggplot-ep.-1/#ps&#34;&gt;how to read a boxplot&lt;/a&gt;). By contrast, the line plot shows only the range (minimum and maximum of the data) and the strip plot the raw data with each single observation. However, a line chart is not a good choice here since it does not allow for the identification of single countries. By adding an &lt;code&gt;alpha&lt;/code&gt; argument to &lt;code&gt;geom_point()&lt;/code&gt;, the strip plot is able to highlight the main range of student-teacher ratios while also showing the raw data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g + geom_point(size = 3, alpha = 0.15)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/strip-plot-alpha-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Of course, different geoms can also be combined to provide even more information in one plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g +
  geom_boxplot(color = &amp;quot;gray60&amp;quot;, outlier.alpha = 0) +
  geom_point(size = 3, alpha = 0.15)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/box-dot-plot-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;⚡ &lt;strong&gt;Remove the outliers of the box plot to avoid double-encoding of the same information! You can achieve this via &lt;code&gt;outlier.alpha = 0&lt;/code&gt;, &lt;code&gt;outlier.color = NA&lt;/code&gt;, &lt;code&gt;outlier.color = &#34;transparent&#34;&lt;/code&gt;, or &lt;code&gt;outlier.shape = NA&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are going to stick to points to visualize the countries explicitly instead of aggregating the data into box or violin plots.
To achieve a higher readability, we use another geom, &lt;code&gt;geom_jitter()&lt;/code&gt; which scatters the points in a given direction (x and/or y via &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;) to prevent over-plotting:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(2019)

g + geom_jitter(size = 2, alpha = 0.25, width = 0.2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/plot-jitter-countries-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;Set a seed to keep the jittering of the points fixed every time you call &lt;code&gt;geom_jitter()&lt;/code&gt; by calling &lt;code&gt;set.seed()&lt;/code&gt;—this becomes especially important when we later label some of the points.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;You can also set the seed within the &lt;code&gt;geom_jitter()&lt;/code&gt; call by setting &lt;code&gt;position = position_jitter(seed)&lt;/code&gt;. Note that in this case the &lt;code&gt;width&lt;/code&gt; and/or &lt;code&gt;height&lt;/code&gt; argument needs to be placed inside the &lt;code&gt;position_jitter()&lt;/code&gt; function as well:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g + geom_jitter(position = position_jitter(seed = 2019, width = 0.2), size = 2, alpha = 0.25)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(In the next code chunks, I am going to use the redundant call of &lt;code&gt;set.seed(2019)&lt;/code&gt; before creating the plot but do not show it each time.)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;more&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;💯 More Geoms, More Fun, More Info!&lt;/h3&gt;
&lt;p&gt;As mentioned in the beginning, my intention was to visualize both, the country- and continental-level ratios, in addition to the tile map. Until now, we focused on countries only. We can indicate the continental average by adding a summary statistic via &lt;code&gt;stat_summary()&lt;/code&gt;with a different point size as the points of &lt;code&gt;geom_jitter()&lt;/code&gt;. Since the average is more important here, I am going to highlight it with a bigger size and zero transparency:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g +
  geom_jitter(size = 2, alpha = 0.25, width = 0.2) +
  stat_summary(fun = mean, geom = &amp;quot;point&amp;quot;, size = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/plot-jitter-regions-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note that we could also use &lt;code&gt;geom_point(aes(x = region, y = student_ratio_region), size = 5)&lt;/code&gt; to achieve the same since we already have a regional mean average in our data.&lt;/p&gt;
&lt;p&gt;To relate all these points to a baseline, we add a line indicating the worldwide average:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;world_avg &amp;lt;-
  df_ratios %&amp;gt;%
  summarize(avg = mean(student_ratio, na.rm = TRUE)) %&amp;gt;%
  pull(avg)

g +
  geom_hline(aes(yintercept = world_avg), color = &amp;quot;gray70&amp;quot;, size = 0.6) +
  stat_summary(fun = mean, geom = &amp;quot;point&amp;quot;, size = 5) +
  geom_jitter(size = 2, alpha = 0.25, width = 0.2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/worldwide-avg-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;One could derive the worldwide average also within the &lt;code&gt;geom_hline()&lt;/code&gt; call, but I prefer to keep both steps separated.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can further highlight that the baseline is the worldwide average ratio rather than a ratio of 0 (or 1?) by adding a line from each continental average to the worldwide average. The result is a combination of a jitter and a lollipop plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g +
  geom_segment(
    aes(x = region, xend = region,
        y = world_avg, yend = student_ratio_region),
    size = 0.8
  ) +
  geom_hline(aes(yintercept = world_avg), color = &amp;quot;gray70&amp;quot;, size = 0.6) +
  geom_jitter(size = 2, alpha = 0.25, width = 0.2) +
  stat_summary(fun = mean, geom = &amp;quot;point&amp;quot;, size = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/plot-jitter-regions-world-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;⚡ &lt;strong&gt;Check the order of the geoms to prevent any overlapping—here, for example, draw the line after calling &lt;code&gt;geom_segment()&lt;/code&gt; to avoid overlapping!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;text&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;💬 Add Text Boxes to Let The Plot Speak for Itself&lt;/h3&gt;
&lt;p&gt;Since I don’t want to include legends, I add some text boxes that explain the different point sizes and the baseline level via &lt;code&gt;annotate(geom = &#34;text&#34;)&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(g_text &amp;lt;-
  g +
  geom_segment(
    aes(x = region, xend = region,
        y = world_avg, yend = student_ratio_region),
    size = 0.8
  ) +
  geom_hline(aes(yintercept = world_avg), color = &amp;quot;gray70&amp;quot;, size = 0.6) +
  stat_summary(fun = mean, geom = &amp;quot;point&amp;quot;, size = 5) +
  geom_jitter(size = 2, alpha = 0.25, width = 0.2) +
  annotate(
    &amp;quot;text&amp;quot;, x = 6.3, y = 35, family = &amp;quot;Poppins&amp;quot;, size = 2.8, color = &amp;quot;gray20&amp;quot;, lineheight = .9,
    label = glue::glue(&amp;quot;Worldwide average:\n{round(world_avg, 1)} students per teacher&amp;quot;)
  ) +
  annotate(
    &amp;quot;text&amp;quot;, x = 3.5, y = 10, family = &amp;quot;Poppins&amp;quot;, size = 2.8, color = &amp;quot;gray20&amp;quot;,
    label = &amp;quot;Continental average&amp;quot;
  ) +
  annotate(
    &amp;quot;text&amp;quot;, x = 1.7, y = 11, family = &amp;quot;Poppins&amp;quot;, size = 2.8, color = &amp;quot;gray20&amp;quot;,
    label = &amp;quot;Countries per continent&amp;quot;
  ) +
  annotate(
    &amp;quot;text&amp;quot;, x = 1.9, y = 64, family = &amp;quot;Poppins&amp;quot;, size = 2.8, color = &amp;quot;gray20&amp;quot;, lineheight = .9,
    label = &amp;quot;The Central African Republic has by far\nthe most students per teacher&amp;quot;)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/text-labels-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;You could also create a new data set (similar to our &lt;code&gt;arrows&lt;/code&gt; data frame below) that holds the labels and the exact position, along with some other information if needed, and add that via &lt;code&gt;geom_text(data = my_labels, aes(label = my_label_column))&lt;/code&gt;. Note that here we also would need to create a factor for the region to match the original data!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;Use &lt;a href=&#34;https://glue.tidyverse.org/&#34;&gt;&lt;code&gt;glue::glue()&lt;/code&gt;&lt;/a&gt; to combine strings with variables—this way, you can update your plots without copying and pasting values! (Of course, you can also use your good old friend &lt;code&gt;paste0()&lt;/code&gt;.)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;… and add some arrows to match the text to the visual elements by providing start- and endpoints of the arrows when calling &lt;code&gt;geom_curve()&lt;/code&gt;. I am going to draw all arrows with one call—but you could also draw arrow by arrow. This is not that simple as the absolute position depends on the dimension of the plot. Good guess based on the coordinates of the text boxes…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;arrows &amp;lt;-
  tibble(
    x1 = c(6.2, 3.5, 1.7, 1.7, 1.9),
    x2 = c(5.6, 4, 1.9, 2.9, 1.1),
    y1 = c(35, 10, 11, 11, 73),
    y2 = c(world_avg, 19.4, 14.16, 12, 83.4)
  )

g_text +
  geom_curve(
    data = arrows, aes(x = x1, y = y1, xend = x2, yend = y2),
    arrow = arrow(length = unit(0.07, &amp;quot;inch&amp;quot;)), size = 0.4,
    color = &amp;quot;gray20&amp;quot;, curvature = -0.3
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/arrows-annotations-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;… and then adjust, adjust, adjust…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;arrows &amp;lt;-
  tibble(
    x1 = c(6.1, 3.62, 1.8, 1.8, 1.8),
    x2 = c(5.6, 4, 2.18, 2.76, 0.9),
    y1 = c(world_avg + 6, 10.5, 9, 9, 77),
    y2 = c(world_avg + 0.1, 18.4, 14.16, 12, 83.45)
  )

(g_arrows &amp;lt;-
  g_text +
  geom_curve(
    data = arrows, aes(x = x1, y = y1, xend = x2, yend = y2),
    arrow = arrow(length = unit(0.08, &amp;quot;inch&amp;quot;)), size = 0.5,
    color = &amp;quot;gray20&amp;quot;, curvature = -0.3
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/text-arrows-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;Since the curvature is the same for all arrows, one can use different x and y distances and directions between the start end and points to vary their shape!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One last thing that bothers me: A student-teacher ratio of 0 does not make much sense—I definitely prefer to start at a ratio of 1!&lt;br /&gt;
And—oh my!—we almost forgot to mention and acknowledge the data source 😨 Let’s quickly also add a plot caption:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(g_final &amp;lt;-
  g_arrows +
  scale_y_continuous(
    limits = c(1, NA), expand = c(0.02, 0.02),
    breaks = c(1, seq(20, 80, by = 20))
  ) +
  labs(caption = &amp;quot;Data: UNESCO Institute for Statistics&amp;quot;) +
  theme(plot.caption = element_text(size = 9, color = &amp;quot;gray50&amp;quot;))
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/final-caption-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;legend&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;🗺️ Bonus: Add a Tile Map as Legend&lt;/h3&gt;
&lt;p&gt;To make it easier to match the countries of the second plot, the country-level tile map, to each continent we have visualized with our jitter plot, we can add a geographical “legend”. For this, I encode the region by color instead by the country-level ratios:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(map_regions &amp;lt;-
  df_sorted %&amp;gt;%
  ggplot(aes(x = x, y = y, fill = region, color = region)) +
    geom_tile(color = &amp;quot;white&amp;quot;) +
    scale_y_reverse() +
    ggsci::scale_fill_uchicago(guide = &amp;quot;none&amp;quot;) +
    coord_equal() +
    theme(line = element_blank(),
          panel.background = element_rect(fill = &amp;quot;transparent&amp;quot;),
          plot.background = element_rect(fill = &amp;quot;transparent&amp;quot;, color = &amp;quot;transparent&amp;quot;),
          panel.border = element_rect(color = &amp;quot;transparent&amp;quot;),
          strip.background = element_rect(color = &amp;quot;gray20&amp;quot;),
          axis.text = element_blank(),
          plot.margin = margin(0, 0, 0, 0)) +
    labs(x = NULL, y = NULL)
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/map-regions-1.png&#34; width=&#34;624&#34; /&gt;&lt;/p&gt;
&lt;p&gt;… and add this map to the existing plot via &lt;code&gt;annotation_custom(ggplotGrob())&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g_final +
  annotation_custom(ggplotGrob(map_regions), xmin = 2.5, xmax = 7.5, ymin = 52, ymax = 82)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/plot-with.map-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;🎄 The Final Evolved Visualization&lt;/h3&gt;
&lt;p&gt;And here it is, our final plot—evolved from a dreary gray box plot to a self-explanatory, colorful visualization including the raw data and a tile map legend! 🎉&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/plot-before-after-1.png&#34; width=&#34;1536&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading, I hope you’ve enjoyed it! Here you find &lt;a href=&#34;https://www.cedricscherer.com/top/dataviz/&#34;&gt;more visualizations I’ve contributed to the #TidyTuesday challenges&lt;/a&gt; including my full contribution to week 19 of 2019 we have dissected here:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/tidytuesday/2019_19_StudentTeacher.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;code&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;💻 Complete Code&lt;/h3&gt;
&lt;p&gt;If you want to create the plot on your own or play around with the code, copy and paste these ~60 lines:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## packages
library(tidyverse)
library(ggsci)
library(showtext)

## load fonts
font_add_google(&amp;quot;Poppins&amp;quot;, &amp;quot;Poppins&amp;quot;)
font_add_google(&amp;quot;Roboto Mono&amp;quot;, &amp;quot;Roboto Mono&amp;quot;)
showtext_auto()

## get data
devtools::source_gist(&amp;quot;https://gist.github.com/Z3tt/301bb0c7e3565111770121af2bd60c11&amp;quot;)

## tile map as legend
map_regions &amp;lt;-
  df_ratios %&amp;gt;%
  mutate(region = fct_reorder(region, -student_ratio_region)) %&amp;gt;%
  ggplot(aes(x = x, y = y, fill = region, color = region)) +
    geom_tile(color = &amp;quot;white&amp;quot;) +
    scale_y_reverse() +
    scale_fill_uchicago(guide = &amp;quot;none&amp;quot;) +
    coord_equal() +
    theme_light() +
    theme(
      line = element_blank(),
      panel.background = element_rect(fill = &amp;quot;transparent&amp;quot;),
      plot.background = element_rect(fill = &amp;quot;transparent&amp;quot;,
                                     color = &amp;quot;transparent&amp;quot;),
      panel.border = element_rect(color = &amp;quot;transparent&amp;quot;),
      strip.background = element_rect(color = &amp;quot;gray20&amp;quot;),
      axis.text = element_blank(),
      plot.margin = margin(0, 0, 0, 0)
    ) +
    labs(x = NULL, y = NULL)

## calculate worldwide average
world_avg &amp;lt;-
  df_ratios %&amp;gt;%
  summarize(avg = mean(student_ratio, na.rm = TRUE)) %&amp;gt;%
  pull(avg)

## coordinates for arrows
arrows &amp;lt;-
  tibble(
    x1 = c(6, 3.65, 1.8, 1.8, 1.8),
    x2 = c(5.6, 4, 2.18, 2.76, 0.9),
    y1 = c(world_avg + 6, 10.5, 9, 9, 77),
    y2 = c(world_avg + 0.1, 18.4, 14.16, 12, 83.42)
  )

## final plot
## set seed to fix position of jittered points
set.seed(2019)

## final plot
df_ratios %&amp;gt;%
  mutate(region = fct_reorder(region, -student_ratio_region)) %&amp;gt;%
  ggplot(aes(x = region, y = student_ratio, color = region)) +
    geom_segment(
      aes(x = region, xend = region,
          y = world_avg, yend = student_ratio_region),
      size = 0.8
    ) +
    geom_hline(aes(yintercept = world_avg), color = &amp;quot;gray70&amp;quot;, size = 0.6) +
    stat_summary(fun = mean, geom = &amp;quot;point&amp;quot;, size = 5) +
    geom_jitter(size = 2, alpha = 0.25, width = 0.2) +
    coord_flip() +
    annotate(
      &amp;quot;text&amp;quot;, x = 6.3, y = 35, family = &amp;quot;Poppins&amp;quot;,
      size = 2.7, color = &amp;quot;gray20&amp;quot;,
      label = glue::glue(&amp;quot;Worldwide average:\n{round(world_avg, 1)} students per teacher&amp;quot;)
    ) +
    annotate(
      &amp;quot;text&amp;quot;, x = 3.5, y = 10, family = &amp;quot;Poppins&amp;quot;,
      size = 2.7, color = &amp;quot;gray20&amp;quot;,
      label = &amp;quot;Continental average&amp;quot;
    ) +
    annotate(
      &amp;quot;text&amp;quot;, x = 1.7, y = 11, family = &amp;quot;Poppins&amp;quot;,
      size = 2.7, color = &amp;quot;gray20&amp;quot;,
      label = &amp;quot;Countries per continent&amp;quot;
    ) +
    annotate(
      &amp;quot;text&amp;quot;, x = 1.9, y = 64, family = &amp;quot;Poppins&amp;quot;,
      size = 2.7, color = &amp;quot;gray20&amp;quot;,
      label = &amp;quot;The Central African Republic has by far\nthe most students per teacher&amp;quot;
    ) +
    geom_curve(
      data = arrows, aes(x = x1, xend = x2,
                         y = y1, yend = y2),
      arrow = arrow(length = unit(0.08, &amp;quot;inch&amp;quot;)), size = 0.5,
      color = &amp;quot;gray20&amp;quot;, curvature = -0.3#
    ) +
    annotation_custom(
      ggplotGrob(map_regions),
      xmin = 2.5, xmax = 7.5, ymin = 52, ymax = 82
    ) +
    scale_y_continuous(
      limits = c(1, NA), expand = c(0.02, 0.02),
      breaks = c(1, seq(20, 80, by = 20))
    ) +
    scale_color_uchicago() +
    labs(
      x = NULL, y = &amp;quot;Student to teacher ratio&amp;quot;,
      caption = &amp;#39;Data: UNESCO Institute for Statistics&amp;#39;
    ) +
    theme_light(base_size = 18, base_family = &amp;quot;Poppins&amp;quot;) +
    theme(
      legend.position = &amp;quot;none&amp;quot;,
      axis.title = element_text(size = 12),
      axis.text.x = element_text(family = &amp;quot;Roboto Mono&amp;quot;, size = 10),
      plot.caption = element_text(size = 9, color = &amp;quot;gray50&amp;quot;),
      panel.grid = element_blank()
    )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ps&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;📝 Post Scriptum: Mean versus Median&lt;/h3&gt;
&lt;p&gt;One thing I want to highlight is that the final plot does not contain the same information as the original box plot. While I have visualized the mean values of each country and across the globe, the box of a Box-and-Whisker plot represents the 25th, 50th, 75th percentile of the data (also known as first, second and third quartile):&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;http://localhost:1313/img/evol-ggplot/boxplot.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;In a Box-and-Whisker plot the box visualizes the upper and lower quartiles, so the box spans the interquartile range (IQR) containing 50 percent of the data, and the median is marked by a vertical line inside the box.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The 2nd quartile is known as the &lt;strong&gt;median&lt;/strong&gt;, i.e. 50% of the data points fall below this value and the other 50% are higher than this value. My decision to estimate the mean value was based on the fact that my aim was a visualization that is easily understandable to a large (non-scientific) audience that are used to mean (“average”) values but not to median estimates. However, in case of skewed data, the mean value of a data set is also biased towards higher or lower values. Let’s compare both a plot based on the mean and the median:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/mean-vs-median-1.png&#34; width=&#34;816&#34; /&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/mean-vs-median-2.png&#34; width=&#34;816&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As one can see, the differences between continents stay roughly the same but the worldwide median is lower than the worldwide average (19.6 students per teacher versus 23.5). The plot with medians highlights that the median student-teacher ratio of Asia and Oceania are similar to the worldwide median. This plot now resembles much more the basic box plot we used in the beginning but may be harder to interpret for some compared to the one visualizing average ratios.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
