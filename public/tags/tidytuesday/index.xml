<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TidyTuesday on Alan Jrz</title>
    <link>http://localhost:1313/tags/tidytuesday/</link>
    <description>Recent content in TidyTuesday on Alan Jrz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/tidytuesday/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My Personal Data Visualization Year 2020</title>
      <link>http://localhost:1313/2021/01/01/review-2020-personal-dataviz-highlights/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2021/01/01/review-2020-personal-dataviz-highlights/</guid>
      <description>&lt;p style=&#34;font-size:14px&#34;&gt;Header image by &lt;a href=&#34;https://www.instagram.com/richard.strozynski/?hl=en&#34;&gt;Richard Strozynski&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Uff, what a year! 366 days ago, most people &lt;a href=&#34;https://www.nytimes.com/issue/todaysheadlines/2020/01/01/todays-headlines&#34;&gt;did not expect 2020 to be that exhausting&lt;/a&gt;, emotionally and physically (and let&amp;rsquo;s hope for a better 2021—happy new year to you!). COVID19 was literally everywhere, whether in the media or affecting your personal life, and made it hard to focus and keep social contacts. Plus all the other things that were happening: starting off with the &lt;a href=&#34;https://www.cedricscherer.com/2020/01/09/australian-bushfires-comparison-europe-world/&#34;&gt;bushfires in Australia&lt;/a&gt;, the massive series of police brutality protests after the shocking death of George Floyd, tiring and everlasting Brexit negotiations, Trump&amp;rsquo;s madness reaching new levels, and all the news and uncertainty around COVID19 mutations circulating at the end of 2020.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Consequently, many people let the year end with a more or less cheerful&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;F*CK 2020!&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;But that would be too easy and also ignorant. Even though it was a crazy and exhausting year, there were also some good and exiting things happening (I hope for you as well!). So I take a short break on New Year&amp;rsquo;s Day and look back at some of the positive moments of 2020 by focusing on my personal data visualization journey.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#work&#34;&gt;&lt;strong&gt;Freelance Work&lt;/strong&gt;&lt;/a&gt;: I started working as a freelancing data visualization designer and workshop instructor and was creating visualizations for several clients and gave three workshops.&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#challenge&#34;&gt;&lt;strong&gt;Challenge Contributions&lt;/strong&gt;&lt;/a&gt;: I managed to contribute to 41 data visualization challenges, won the &lt;a href=&#34;https://correlaid.org/de/blog/correlaidx-challenge/&#34;&gt;CorrelAid X Challenge&lt;/a&gt; with the Local Chapter Berlin and received an Honorable Mention in the &lt;a href=&#34;https://blog.rstudio.com/2020/12/23/winners-of-the-2020-rstudio-table-contest/&#34;&gt;RStudio Table Contest&lt;/a&gt;.&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#personal&#34;&gt;&lt;strong&gt;Personal Projects&lt;/strong&gt;&lt;/a&gt;: I started (and abandoned) a range of personal projects of which the &lt;a href=&#34;https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/&#34;&gt;&lt;code&gt;{ggplot2}&lt;/code&gt; tutorial&lt;/a&gt;, my &lt;a href=&#34;https://www.cedricscherer.com/2020/03/31/corona-covid-19-death-tolls-worst-day-so-far/&#34;&gt;COVID19 visualization series&lt;/a&gt;, and &lt;a href=&#34;https://www.youtube.com/watch?v=swzFdMc6WPk&#34;&gt;my first appearance on YouTube&lt;/a&gt; were the highlights this year.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;work&#34;&gt;Freelance Work&lt;/h2&gt;
&lt;h5 id=&#34;data-visualization-design-and-data-science&#34;&gt;Data Visualization Design (and Data Science)&lt;/h5&gt;
&lt;p&gt;Begin of 2020, a time most people haven&amp;rsquo;t heard of COVID19 yet, I started to work as a freelancing data visualization designer. And sooner as expected, I had the chance to work in the data analysis and visualization business.&lt;/p&gt;
&lt;p&gt;Back in October 2019, &lt;a href=&#34;https://frontpagedata.com/&#34;&gt;FrontPage Data&lt;/a&gt; I applied for a Data Scientist role to support with data analysis and visualization and they picked me to create data-centric content for a variety of clients. Ultimately, this meant that my 3-month &amp;ldquo;sabbatical&amp;rdquo; at the begin of the year was canceled—but it also made it possible to focus mainly on my first freelancing projects. Perfect! (However, this also means that d3 is still on my list of tools I want to learn since I didn&amp;rsquo;t find time for it yet.) All analyses were done in R, sometimes in combination with SQL, and all visualizations with the help of &lt;a href=&#34;https://ggplot2.tidyverse.org/&#34;&gt;&lt;code&gt;{ggplot2}&lt;/code&gt;&lt;/a&gt; plus some with &lt;a href=&#34;https://plotly.com/&#34;&gt;&lt;code&gt;{plotly}&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/review-2020/fp-collage.png&#34; alt=&#34;fp-collage.png&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;small&#34; align=&#34;center&#34;&#34;&gt;&lt;i style=&#34;color:#808080;&#34;&gt;Some of the data visualizations I created for &lt;a href=&#34;https://frontpagedata.com/&#34;&gt;FrontPage Data&lt;/a&gt; in 2020.&lt;br&gt;Ownership of the visualizations by FrontPage Data, &lt;a href=&#34;https://backlinko.com/&#34;&gt;Backlinko&lt;/a&gt;, &lt;a href=&#34;https://rankings.io/&#34;&gt;rankings.io&lt;/a&gt;, and &lt;a href=&#34;https://www.kuendigung.org/&#34;&gt;kuendigung.org&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;The full list of all published projects I created visualizations for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://backlinko.com/keyword-research-tool-analysis&#34;&gt;How Data From Popular Keyword Research Tools Compare&lt;/a&gt; by Backlinko&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://backlinko.com/search-engine-ranking&#34;&gt;We Analyzed 11.8 Million Google Search Results: Here’s What We Learned About SEO&lt;/a&gt; by Backlinko&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rankings.io/personal-injury-seo-data-science/&#34;&gt;SEO Data Science: A Study of 112K Personal Injury Law Firms&lt;/a&gt; by rankings.io&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://backlinko.com/seo-jobs-report&#34;&gt;The 2020 SEO Jobs Report&lt;/a&gt; by Backlinko&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kuendigung.org/studien/verbraucherumfrage-zur-zukunft-nach-der-krise/&#34;&gt;Consumer survey on contracts during the COVID19 crisis (German)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://backlinko.com/google-user-behavior&#34;&gt;How People Use Google Search (New User Behavior Study)&lt;/a&gt; by Backlinko&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://frontpagedata.com/data-visualization/&#34;&gt;How Better Aesthetics can Help to Transport your Stories&lt;/a&gt; by FrontPage Data&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://backlinko.com/google-keyword-study&#34;&gt;We Analyzed 306M Keywords—Here&amp;rsquo;s What We Learned About Google Searches&lt;/a&gt; by Backlinko&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rankings.io/google-my-business-ranking-study/&#34;&gt;Google My Business Ranking Study of Injury Attorneys in 426 U.S. Cities&lt;/a&gt; by rankings.io&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also have some other running and upcoming client projects, hopefully I am able to share more with you next year!&lt;/p&gt;
&lt;h5 id=&#34;workshop-coaching&#34;&gt;Workshop Coaching&lt;/h5&gt;
&lt;p&gt;In 2020, I also gave my first data visualization and &lt;code&gt;{ggplot2}&lt;/code&gt; workshops, two of them for &lt;a href=&#34;https://www.physalia-courses.org/&#34;&gt;Physalia Courses&lt;/a&gt; and the other for the &lt;a href=&#34;https://www.uni-bielefeld.de/biologie/crc212/&#34;&gt;NC&lt;sup&gt;3&lt;/sup&gt; Collaborative Research Centre&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/review-2020/workshop-collage.png&#34; alt=&#34;workshop-collage.png&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;small&#34; align=&#34;center&#34;&#34;&gt;&lt;i style=&#34;color:#808080;&#34;&gt;Some slides of the data visualization ✕  ggplot2 workshops I gave in 2020.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;The first Physalia workshop happened in March—still in person while the university was discussing how to proceed given the rising numbers of COVID19 infections in the south of Germany—and was a five-day workshop called &amp;ldquo;Data Visualization in R with &lt;code&gt;{ggplot2}&lt;/code&gt;&amp;rdquo;. I used the same data as in the &lt;a href=&#34;https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/&#34;&gt;&amp;ldquo;A Tutorial for Beautiful Plotting in R&amp;rdquo;&lt;/a&gt;, namely four years of environmental variables in Chicago from the &lt;a href=&#34;https://www.healtheffects.org/publication/national-morbidity-mortality-and-air-pollution-study-part-ii-morbidity-and-mortality-air&#34;&gt;National Morbidity and Mortality Air Pollution Study (NMMAPS)&lt;/a&gt;. It was a great experience and we did run the same workshop with updated materials roughly half a year later—remotely since COVID19 now had become a pandemic and the second wave was hitting Germany. While I like teaching in direct contact (and also to walk around a lot), the new virtual setup made it possible for people all over the world to join. (Btw, even for the first in-person workshop two participants were coming from the US.) The workshop for NC&lt;sup&gt;3&lt;/sup&gt; was a compressed 2-day version using &lt;a href=&#34;https://www.movebank.org/cms/movebank-content/about-movebank&#34;&gt;Caribou movement data&lt;/a&gt; from Movebank which was a &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-06-23/readme.md&#34;&gt;#TidyTuesday challenge&lt;/a&gt; in 2020.&lt;/p&gt;
&lt;h2 id=&#34;challenge&#34;&gt;Challenge Contributions&lt;/h2&gt;
&lt;p&gt;While I missed to fulfil my resolution of contributing to all 52 #TidyTuesday challenges in 2020 (yeah, life gets complicated during a pandemic) I collected a bunch of personal visualizations and contributions to several challenges this year.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/review-2020/challenge-collage.png&#34; alt=&#34;challenge-collage.png&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;small&#34; align=&#34;center&#34;&#34;&gt;&lt;i style=&#34;color:#808080;&#34;&gt;A collection of all main plots of my personal projects and challenge contributions in 2020.&lt;/i&gt;&lt;/p&gt;
&lt;h5 id=&#34;tidytuesday-challenge&#34;&gt;TidyTuesday Challenge&lt;/h5&gt;
&lt;p&gt;Of course, still high on the priority list—&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday&#34;&gt;#TidyTuesday&lt;/a&gt;. In the end, I managed to finish &lt;strong&gt;39 out of 52&lt;/strong&gt; (plus two old ones I did in 2020)!&lt;/p&gt;
&lt;p&gt;My Top 5 #TidyTuesday contributions in 2020 (measured in likes on Twitter) are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/CedScherer/status/1281475431707877377&#34;&gt;&lt;strong&gt;&amp;ldquo;Not My Cup of Coffee&amp;rdquo;&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/CedScherer/status/1288181995714093057&#34;&gt;&lt;strong&gt;&amp;ldquo;Bill-Dimensions of Brush-Tailed Penguins&amp;rdquo;&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/CedScherer/status/1283143185766678535&#34;&gt;&lt;strong&gt;&amp;ldquo;Travelling to Outer Space&amp;rdquo;&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/CedScherer/status/1220843943224578050&#34;&gt;&lt;strong&gt;&amp;ldquo;The Golden Age of Hip Hop in the Era of Spotify&amp;rdquo;&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/CedScherer/status/1278236004068012034&#34;&gt;&lt;strong&gt;&amp;ldquo;Appearance of the Five Most Popular X-Men Characters&amp;rdquo;&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/review-2020/tidytop-collage.png&#34; alt=&#34;tidytop-collage.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Some contributions received more attention—here are a few highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/CedScherer/status/1281475431707877377&#34;&gt;&amp;ldquo;Not My Cup of Coffee&amp;rdquo;&lt;/a&gt; was highlighted by &lt;a href=&#34;https://twitter.com/visualisingdata/status/1337428800007757828&#34;&gt;Andy Kirk&lt;/a&gt; in his &lt;a href=&#34;https://www.visualisingdata.com/2020/12/best-of-the-visualisation-web-september-2020/&#34;&gt;&amp;ldquo;Best of Visualization Web&amp;hellip; September 2020&amp;rdquo; collection&lt;/a&gt; and was featured on the &lt;a href=&#34;https://twitter.com/visualisingdata/status/1337428800007757828&#34;&gt;&amp;ldquo;BeanPoet&amp;rdquo; blog including an interview&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/CedScherer/status/1220843943224578050&#34;&gt;&amp;ldquo;The Golden Age of Hip Hop in the Era of Spotify&amp;rdquo;&lt;/a&gt; got 15k karma points and 14 awards on &lt;a href=&#34;https://www.reddit.com/r/dataisbeautiful/comments/etpkk5/oc_the_golden_age_of_hip_hop_in_the_era_of_spotify/&#34;&gt;Reddit&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The waterfall/lollipop plot combination showing &lt;a href=&#34;https://twitter.com/CedScherer/status/1242229041488433152&#34;&gt;IMDb ratings of &amp;ldquo;The Office&amp;rdquo;&lt;/a&gt; got resembled many times (e.g. by &lt;a href=&#34;https://twitter.com/AndrewJamesMott/status/1300132551152087042&#34;&gt;Andrew Mott&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/JaredBraggins/status/1298414717107544064&#34;&gt;Jared Braggins&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/_isabellamb/status/1294673958806204416/photo/1&#34;&gt;Isabella Benabaye&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/JDavison_/status/1292896713003409410&#34;&gt;Jack Davison&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/surbhaai/status/1337772256710160387&#34;&gt;Surbhi Bhatia&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/pedrotol_/status/1300398076239241217&#34;&gt;Pedro Toledo&lt;/a&gt;, and &lt;a href=&#34;https://twitter.com/kustav_sen/status/1303889359838433282/photo/1&#34;&gt;Kaustav Sen&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/review-2020/highlights-collage.png&#34; alt=&#34;highlights-collage.png&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;small&#34; align=&#34;center&#34;&#34;&gt;&lt;i style=&#34;color:#808080;&#34;&gt;The Reddit post (left), the feature on BeanPoet (middle), and my IMDb rating plot (top right) and some of the replicates (bottom right).&lt;/i&gt;&lt;/p&gt;
&lt;h5 id=&#34;swd-challenge&#34;&gt;SWD Challenge&lt;/h5&gt;
&lt;p&gt;Unfortunately, there was not much spare time left to participate in the &lt;a href=&#34;http://www.storytellingwithdata.com/swdchallenge&#34;&gt;&amp;ldquo;Storytelling with Data&amp;rdquo; challenge&lt;/a&gt;. I only managed to contribute two times before the pandemic changed priorities and the motivation, creativity and time to dive into challenges and personal projects.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/review-2020/swd-1.png&#34; alt=&#34;swd-1.png)&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;small&#34; align=&#34;center&#34;&#34;&gt;&lt;i style=&#34;color:#808080;&#34;&gt;My contribution showing shot-goal ratios of all Bundesliga teams for the challenge in January with the topic &#34;small mutliples&#34;.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/review-2020/swd-2.gif&#34; alt=&#34;swd-2.gif&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;small&#34; align=&#34;center&#34;&#34;&gt;&lt;i style=&#34;color:#808080;&#34;&gt;My contribution showing reported deaths due to COVID19 for the challenge in March wit the topic &#34;Get animated!&#34;.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Also, the second contribution kept me busy on a daily basis from March to July and turned into the &lt;a href=&#34;https://www.cedricscherer.com/2020/03/31/corona-covid-19-death-tolls-worst-day-so-far/&#34;&gt;&amp;ldquo;Worst Day of the Coronavirus Pandemic&amp;rdquo; visualization series&lt;/a&gt; which I kept up-to-date until end of June (see &lt;a href=&#34;#personal&#34;&gt;below&lt;/a&gt;).&lt;/p&gt;
&lt;h5 id=&#34;correlaid-x-challenge&#34;&gt;CorrelAid X Challenge&lt;/h5&gt;
&lt;p&gt;I was part of &lt;a href=&#34;https://correlaid.org/&#34;&gt;CorrelAid, a non-profit network of data science enthusiasts&lt;/a&gt;, from 2019 on but got involved for the first time in Summer 2020 when participating in the Berlin group of the &lt;a href=&#34;https://correlaid.org/de/blog/correlaidx-challenge/&#34;&gt;CorrelAid X challenge&lt;/a&gt;. Initially planned as a Python exercise, we quickly moved to R and Shiny since no one of us was experienced in Python. We built &lt;a href=&#34;https://berlinbikes.correlaid.org/#home&#34;&gt;this interactive slideshow&lt;/a&gt; with &lt;a href=&#34;https://shiny.rstudio.com/&#34;&gt;Shiny&lt;/a&gt;, &lt;a href=&#34;https://fullpage.rinterface.com/&#34;&gt;fullpage&lt;/a&gt;, &lt;a href=&#34;http://echarts.apache.org/en/index.html&#34;&gt;echarts&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html&#34;&gt;tmap&lt;/a&gt; investigating reported bike accidents in Berlin and Germany. We focused on the interplay of available cyclist infrastructure and bike accidents in 2019 but still want to include a risk map that allows to compare accidents proportional to bike lane type and not simply in absolute numbers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/review-2020/correlaid-collage.png&#34; alt=&#34;correlaid-collage.png&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;small&#34; align=&#34;center&#34;&#34;&gt;&lt;i style=&#34;color:#808080;&#34;&gt;The landing page of our Shiny app and the title slide of  my workshop at the CorrelCon 2020.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We won the challenge&lt;/strong&gt; 🎉 and were invited to present our app and potential future steps to a broader audience at the &lt;a href=&#34;https://correlaid.org/en/events/2020-11/correlcon/&#34;&gt;CorrelCon&lt;/a&gt;, at which I also gave a short workshop on &lt;a href=&#34;https://github.com/Z3tt/CorrelCon2020_golem_html_widgets&#34;&gt;&amp;ldquo;Building a modularized Shiny app with {golem} and html widgets&amp;rdquo;&lt;/a&gt; in the &amp;ldquo;Data Visualization&amp;rdquo; session.&lt;/p&gt;
&lt;h5 id=&#34;rstudio-table-contest&#34;&gt;RStudio Table Contest&lt;/h5&gt;
&lt;p&gt;First I was not very hyped about the new trend of tables but the amazing examples by &lt;a href=&#34;https://data.fivethirtyeight.com/&#34;&gt;FiveThirtyEight&lt;/a&gt; and &lt;a href=&#34;https://themockup.blog/posts/2020-05-16-gt-a-grammer-of-tables/&#34;&gt;the blog posts on {gt} by Thomas Mock&lt;/a&gt; changed my mind—so I decided to participate as well. I modified a Python script to scrape the rating data for all episodes of the &lt;a href=&#34;https://www.imdb.com/chart/toptv/&#34;&gt;Top 250 TV Shows as rated by IMDb users&lt;/a&gt;. With the &lt;a href=&#34;https://gt.rstudio.com/&#34;&gt;{gt} package&lt;/a&gt;, I created a looong table that focused on displaying the details I and my friends care the most about: of course the ranking and overall rating but additionally the runtime per episode, genres, number of seasons and episodes, ID of the best episodes. But most importantly—the trend of ratings as the TV show progresses, visualized in a similar way as the &lt;a href=&#34;https://en.wikipedia.org/wiki/Warming_stripes&#34;&gt;famous &amp;ldquo;warming stripes&amp;rdquo; by Ed Hawkins&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://community.rstudiwio.com/t/what-do-i-binge-next-an-overview-of-the-top-imdb-tv-shows-table-contest-submission/86409&#34;&gt;&lt;img src=&#34;http://localhost:1313/img/review-2020/IMDb_TopAnimation.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&#34;small&#34; align=&#34;center&#34;&#34;&gt;&lt;i style=&#34;color:#808080;&#34;&gt;My contribution to the RStudio Table Contest 2020, here showing all animation series in the Top 250.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;At the end participants contributed &lt;a href=&#34;https://community.rstudio.com/tag/table-contest&#34;&gt;more then 80 tables&lt;/a&gt; of which many were great examples of R&amp;rsquo;s versatility when it comes to tables. First of all, congrats to &lt;a href=&#34;https://twitter.com/nielsvdv?lang=en&#34;&gt;Niels van der Velden&lt;/a&gt; who has won the challenge with his table tutorial! My static IMDb table(s) made it into the &lt;a href=&#34;https://blog.rstudio.com/2020/12/23/winners-of-the-2020-rstudio-table-contest/&#34;&gt;&lt;strong&gt;&amp;ldquo;Honourable Mentions&amp;rdquo;&lt;/strong&gt;&lt;/a&gt; along with my #TidyTuesday companions &lt;a href=&#34;https://twitter.com/geokaramanis&#34;&gt;Georgios Karamanis&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/kc_analytics&#34;&gt;Kyle Cuilla&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/schmid_07&#34;&gt;Bill Schmid&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;personal&#34;&gt;Personal Projects&lt;/h2&gt;
&lt;p&gt;Over the year, I collected a range of project ideas. Most of them are still in the drafting phase (and some of them likely get abandoned) but I managed to finish at least some of them.&lt;/p&gt;
&lt;h5 id=&#34;covid19-visualizations&#34;&gt;COVID19 Visualizations&lt;/h5&gt;
&lt;p&gt;The #SWDchallenge contribution led into a series of animations and plots with showing the progress of the COVID19 spread on a country level. I hesitated for a while to create any Corona-related visualizations (read more &lt;a href=&#34;https://www.cedricscherer.com/2020/03/31/corona-covid-19-death-tolls-worst-day-so-far/&#34;&gt;here&lt;/a&gt;) but felt confident enough with the knowledge and data at the end of March. Unfortunately, I had to stop the updates for some reasons:  the chart type became unsuitable for the long period and the data cleaning became labor-intense given the many revisions of the actual numbers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/review-2020/covid-collage.png&#34; alt=&#34;covid-collage.png&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;small&#34; align=&#34;center&#34;&#34;&gt;&lt;i style=&#34;color:#808080;&#34;&gt;The last versions of my COVID19-related visualizations from June 28 2020. Heatmaps with various rankings (top row) plus grid maps and traditional trajectories (bottom row).&lt;/i&gt;&lt;/p&gt;
&lt;h5 id=&#34;ggplot2-tutorial&#34;&gt;ggplot2 Tutorial&lt;/h5&gt;
&lt;p&gt;From August on, I started reworking the complete &lt;a href=&#34;https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/&#34;&gt;&amp;ldquo;A ggplot2 Tutorial for Beautiful Plotting in R&amp;rdquo;&lt;/a&gt; which I uploaded on December 2. The new version does not only include reworked texts with more extensive descriptions of the principals and technical details but also a ton of new examples and topics. It received a lot of attention on &lt;a href=&#34;https://twitter.com/CedScherer/status/1334256845393948677&#34;&gt;Twitter&lt;/a&gt; and the blog post attracted more than 10,000 page visits! Among many feedback, &lt;a href=&#34;https://twitter.com/AlbertoCairo/status/1334853210096488449&#34;&gt;Alberto Cairo&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jschwabish/status/1334293499265609728&#34;&gt;Jon Schwabisch&lt;/a&gt; shared the tutorial and Jon decided to use the turoial for his &lt;a href=&#34;https://policyviz.com/2020/12/07/r-learning-sprint/&#34;&gt;R Learning Sprint&lt;/a&gt;. I joined for an hour and showed some &lt;a href=&#34;https://github.com/Z3tt/Jons_R_Learning_Sprint&#34;&gt;motivating examples as a kick-off&lt;/a&gt;. Thanks again Jon for that opportunity!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/review-2020/ggplot2-tutorial-overview.png&#34; alt=&#34;ggplot2-tutorial-overview.png&#34;&gt;&lt;/p&gt;
&lt;p class=&#34;small&#34; align=&#34;center&#34;&#34;&gt;&lt;i style=&#34;color:#808080;&#34;&gt;Some exemplary plots included in the ggplot2 tutorial.&lt;/i&gt;&lt;/p&gt;
&lt;h5 id=&#34;invited-talk-at-bespokeds-x-heureka-labs&#34;&gt;Invited Talk at bespokeDS x Heureka Labs&lt;/h5&gt;
&lt;p&gt;In September, &lt;a href=&#34;https://twitter.com/matthewhirschey?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor&#34;&gt;Matthew Hirschey&lt;/a&gt;—who is currently building the &lt;a href=&#34;https://www.heurekalabs.org/&#34;&gt;Heureka Labs community&lt;/a&gt;—invited me to give a talk about data visualization principles and some hands-on coding with &lt;code&gt;{ggplot2}&lt;/code&gt;. More than 250 people tuned in and you can &lt;a href=&#34;https://www.youtube.com/watch?v=swzFdMc6WPk&#34;&gt;watch the recording on YouTube&lt;/a&gt; (btw my first YouTube ever) and &lt;a href=&#34;https://z3tt.github.io/bespokeDS/&#34;&gt;check the slides and codes here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;Puh, that was a lot but nice if you made it to the end—thank you! I did not intend to make it that long but the more I was looking back, the more positive highlights I found. I still have some on-going and planned client work, personal projects, workshops, conference talks, and a ton of unfinished blog posts so stay tuned for an exciting 2021 that hopefully allows us to focus more on the joy of life and to meet our dear family and friends. Stay safe and stay healthy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comparing the Extent of the Australian Bushfires 2019/20</title>
      <link>http://localhost:1313/2020/01/09/australian-bushfires-comparison-europe-world/</link>
      <pubDate>Thu, 09 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2020/01/09/australian-bushfires-comparison-europe-world/</guid>
      <description>&lt;p style=&#34;font-size:14px&#34;&gt;Header image by &lt;a href=&#34;https://unsplash.com/photos/OjA6F3pSccw&#34;&gt;Michael Barth via Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;During a series of massive bushfires across Australia, large areas have been burned and the fires are still burning. The bushfire is one of the worst wildfires globally seen in decades. Although Australia always experiences a fire season during the summer, this time it has been worse than usually: &lt;a href=&#34;https://edition.cnn.com/2020/01/01/australia/australia-fires-explainer-intl-hnk-scli/index.html&#34;&gt;27 people died and more than 2,000 homes have been destroyed or damaged alone in the worst-hit state of New South Wales&lt;/a&gt;. 800 million animals have been affected since bushfires in NSW have started with an estimate of one billion animals impacted nationally say &lt;a href=&#34;https://sydney.edu.au/news-opinion/news/2020/01/03/a-statement-about-the-480-million-animals-killed-in-nsw-bushfire.html&#34;&gt;ecologists from Sydney University&lt;/a&gt;. Thick smoke is drifting over the Pacific Ocean towards New Zealand and the South American continent. The massive fires have been fuelled by dry organic matter caused by extraordinary high temperatures and a prolonged period of drought which created excellent fire conditions.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;extents-of-burnt-land-and-plume-of-smoke-in-comparison-to-european-countries&#34;&gt;Extents of burnt land and plume of smoke in comparison to European countries&lt;/h3&gt;
&lt;p&gt;As of the 6th of January, the estimated area burnt in Australia was &lt;a href=&#34;https://www.bbc.com/news/world-australia-50951043&#34;&gt;63,000 square kilometres (~24,000 square miles)&lt;/a&gt;—an area as large as the Latvian country in Europe. The plume of smoke created by the bushfires covered &lt;a href=&#34;https://www.independent.co.uk/news/world/australasia/australia-fires-latest-smoke-forecast-nsw-victoria-food-water-a9266846.html&#34;&gt;an area of 5.5 million square kilometer (2.1 million square miles)&lt;/a&gt; and &lt;a href=&#34;https://www.businessinsider.de/international/australia-wildfires-space-satellite-pictures-smoke-new-zealand-2020-1/?r=US&amp;amp;IR=T&#34;&gt;can be seen from space&lt;/a&gt;. This area is as large as the area of Denmark including Greenland and the Faroe Islands, France, Spain, Sweden, Norway, Germany, Finland, Poland &amp;amp; Italy together!&lt;/p&gt;
&lt;img src=&#34;http://localhost:1313/img/dataviz-posts/2020_02_AustralianFires_blog.png&#34; alt=&#34;map-burnt-land-smoke-europe&#34; style=&#34;width:100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/tidytuesday/2020_02_AustralianFires_blog.png&#39;, &#39;blank&#39;);&#34;/&gt;
&lt;figcaption&gt;Extent of burnt land and smoke caused by the Australian bushfires in relation to European countries.&lt;/figcaption&gt;
&lt;h3 id=&#34;how-much-of-your-countrys-area-would-have-been-burnt-if-the-bushfires-had-raged-there&#34;&gt;How much of your country&amp;rsquo;s area would have been burnt if the bushfires had raged there?&lt;/h3&gt;
&lt;p&gt;As of 8th of January, the land burnt increased to &lt;a href=&#34;https://www.theguardian.com/australia-news/datablog/ng-interactive/2019/dec/07/how-big-are-the-fires-burning-on-the-east-coast-of-australia-interactive-map&#34;&gt;107,000 square kilometres (41,300 square miles)&lt;/a&gt;. To imagine how large the area is, it might be simpler to compare the area to a country you are familiar with:&lt;/p&gt;
&lt;img src=&#34;http://localhost:1313/img/dataviz-posts/2020_02_AustralianFires_Global_blog.png&#34; alt=&#34;map-burnt-land-world&#34; style=&#34;width:100%; object-fit: contain&#34; onclick=&#34;window.open(&#39;https://www.cedricscherer.com/img/tidytuesday/2020_02_AustralianFires_Global_blog.png&#39;, &#39;blank&#39;);&#34;/&gt;
&lt;figcaption&gt;Burnt area in relation to countries worldwide.&lt;/figcaption&gt;
&lt;h3 id=&#34;how-to-help-victims-of-australias-fires&#34;&gt;How to help victims of Australia’s fires&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.nytimes.com/2020/01/06/world/australia/help-australia-fires.html&#34;&gt;NY Times lists several organizations&lt;/a&gt; that are currently helping to provide support, emergency grants, and housing. You can support them too by donating money or clothing and household goods.&lt;/p&gt;
&lt;h3 id=&#34;how-to-create-the-visualizations&#34;&gt;How to create the visualizations?&lt;/h3&gt;
&lt;p&gt;You can find the codes for both maps on my &lt;a href=&#34;https://github.com/Z3tt/TidyTuesday/blob/master/R/2020_02_AustralianFires.Rmd&#34;&gt;GitHub profile&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Best TidyTuesday 2019</title>
      <link>http://localhost:1313/2019/12/30/best-tidytuesday-2019/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2019/12/30/best-tidytuesday-2019/</guid>
      <description>&lt;p style=&#34;font-size:14px&#34;&gt;Header image by &lt;a href=&#34;https://www.instagram.com/richard.strozynski/?hl=en&#34;&gt;Richard Strozynski&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At the end of an exiting second #TidyTuesday year, &lt;a href=&#34;https://twitter.com/JonTheGeek&#34; target=&#34;_blank&#34;&gt;Jon Harmon&lt;/a&gt;, host of the &lt;a href=&#34;https://www.tidytuesday.com/&#34; target=&#34;_blank&#34;&gt;TidyTuesday Podcast&lt;/a&gt;, asked on Twitter:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;What was your favorite &lt;a href=&#34;https://twitter.com/hashtag/TidyTuesday?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TidyTuesday&lt;/a&gt; dataset of 2019? What were some of your favorite visualizations? Why? Let me know with an @ or via &lt;a href=&#34;https://twitter.com/hashtag/BestTidyTuesday2019?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#BestTidyTuesday2019&lt;/a&gt;!&lt;/p&gt;&amp;mdash; TidyTuesday Podcast (@tidypod) &lt;a href=&#34;https://twitter.com/tidypod/status/1204975380416909312?ref_src=twsrc%5Etfw&#34;&gt;December 12, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;I took this opportunity to recap the last year of contributions to the &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday&#34; target=&#34;_blank&#34;&gt;#TidyTuesday challenge&lt;/a&gt;. Immediately, several contributions came to my mind and I tried to pick the best from those I&amp;rsquo;ve seen and which I remember. Since there were to many, I decided to group them in two groups: design and storytelling.&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/design.jpg&#34; alt=&#34;best-tidytuesday-2019-design&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here I refer to &lt;em&gt;design&lt;/em&gt; as visually pleasing and interesting, maybe using unusual chart types to display the data. While it should give insights in the data to serve as a good data viz, there might be simpler (but visually less appealing) ways to tell the same story.&lt;/p&gt;
&lt;h3 id=&#34;chicago-bird-collisions-by-jake-kaupp&#34;&gt;Chicago Bird Collisions by Jake Kaupp&lt;/h3&gt;
&lt;p&gt;One of the most active contributors to the #TidyTuesday is &lt;a href=&#34;https://twitter.com/jakekaupp/&#34; target=&#34;_blank&#34;&gt;Jake Kaupp&lt;/a&gt;. Over the last two years, he participated with several well designed and clever contributions. A particular one that blew me away was his &amp;ldquo;flower representation&amp;rdquo; of bird collisions in Chicago for &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-04-30&#34; target=&#34;_blank&#34;&gt;week 18&lt;/a&gt;. I didn&amp;rsquo;t know such things were possible in ggplot2. Now I know and it looks so beautiful and clean - thanks Jake for the many inspiring contributions!&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;My submission for &lt;a href=&#34;https://twitter.com/hashtag/TidyTuesday?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TidyTuesday&lt;/a&gt; week 18 went to a more artistic place than I expected. I represented the seasonality of the bird collision data in Chicago as petals in a flower. H/T to &lt;a href=&#34;https://twitter.com/thomasp85?ref_src=twsrc%5Etfw&#34;&gt;@thomasp85&lt;/a&gt; for patchwork making layouts a lot easier. Code @ &lt;a href=&#34;https://t.co/1BhlhPnYyC&#34;&gt;https://t.co/1BhlhPnYyC&lt;/a&gt; &lt;a href=&#34;https://t.co/UJitnGr297&#34;&gt;&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/jake_18.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jake Kaupp (@jakekaupp) &lt;a href=&#34;https://twitter.com/jakekaupp/status/1123688940530274305?ref_src=twsrc%5Etfw&#34;&gt;May 1, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Jake presented a similar design in combination with a geofacet of the United States a few weeks later as contribution to &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-07-23&#34; target=&#34;_blank&#34;&gt;week 30 on wildlife strikes by aircrafts&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/jake_30.jpg&#34; alt=&#34;best-tidytuesday-2019-jake-week-30&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ramen-ratings-by-georgios-karamanis&#34;&gt;Ramen Ratings by Georgios Karamanis&lt;/h3&gt;
&lt;p&gt;Of course, &lt;a href=&#34;https://twitter.com/geokaramanis&#34; target=&#34;_blank&#34;&gt;Georgios Karamanis&lt;/a&gt;&amp;rsquo; contributions also crossed my mind. Georgios started participating in 2019 and shared impressive visualization with a particular taste for artistic and creative design. I especially liked this simple but very well-designed contribution to week 23 on &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-06-04&#34; target=&#34;_blank&#34;&gt;Ramen ratings&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Instant ramen reviews by &lt;a href=&#34;https://twitter.com/theramenrater?ref_src=twsrc%5Etfw&#34;&gt;@theramenrater&lt;/a&gt; for &lt;a href=&#34;https://twitter.com/hashtag/TidyTuesday?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TidyTuesday&lt;/a&gt;. Good luck reading the text, but couldn&amp;#39;t help it, it was too much fun making this plot!&lt;br&gt;&lt;br&gt;code: &lt;a href=&#34;https://t.co/jWEPqEefT7&#34;&gt;https://t.co/jWEPqEefT7&lt;/a&gt; &lt;a href=&#34;https://t.co/Rmb8Hslci6&#34;&gt;&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/georgios_23.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&amp;mdash; Georgios Karamanis (@geokaramanis) &lt;a href=&#34;https://twitter.com/geokaramanis/status/1136326761933955072?ref_src=twsrc%5Etfw&#34;&gt;June 5, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Several other contributions by Georgios are on my list of favorites, including the fabulous small multiples of &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2019/2019-08-06&#34; target=&#34;_blank&#34;&gt;Bob Ross paintings&lt;/a&gt; and two—again simple but very clever—visualization of &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2019/2019-07-30&#34; target=&#34;_blank&#34;&gt;Arcade game revenues&lt;/a&gt; and &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2019/2019-06-25&#34; target=&#34;_blank&#34;&gt;UFO sightings&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/georgios_32.jpg&#34; alt=&#34;best-tidytuesday-2019-georgios-week-32&#34;&gt;
&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/georgios_31.jpg&#34; alt=&#34;best-tidytuesday-2019-georgios-week-31&#34;&gt;
&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/georgios_26.jpg&#34; alt=&#34;best-tidytuesday-2019-georgios-week-26&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;cran-code-by-torsten-sprenger&#34;&gt;CRAN Code by Torsten Sprenger&lt;/h3&gt;
&lt;p&gt;Another great and very recent contribution is the fabulous network of CRAN packages by &lt;a href=&#34;https://twitter.com/spren9er&#34; target=&#34;_blank&#34;&gt;Torsten Sprenger&lt;/a&gt; for &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2019/2019-11-12&#34; target=&#34;_blank&#34;&gt;week 46&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;My &lt;a href=&#34;https://twitter.com/hashtag/tidytuesday?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#tidytuesday&lt;/a&gt; 46|2019 contribution: Usage of Popular Programming Languages in 300 large CRAN Packages &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt;&lt;br&gt;&lt;br&gt;Code: &lt;a href=&#34;https://t.co/b015aRyU9Q&#34;&gt;https://t.co/b015aRyU9Q&lt;/a&gt; &lt;a href=&#34;https://t.co/HkmMXmR7Mf&#34;&gt;&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/torsten_46.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&amp;mdash; Dr. Torsten Sprenger (@spren9er) &lt;a href=&#34;https://twitter.com/spren9er/status/1195826547724374018?ref_src=twsrc%5Etfw&#34;&gt;November 16, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Have a look at all of Torsten&amp;rsquo;s contributions, it&amp;rsquo;s a rich source of great ggplot vizes! I particularly liked his minimalistic visualizations of the &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2019/2019-04-16&#34; target=&#34;_blank&#34;&gt;gender bias in scientific publishing&lt;/a&gt; and &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2019/2019-05-21&#34; target=&#34;_blank&#34;&gt;global plastic waste&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/torsten_21.jpg&#34; alt=&#34;best-tidytuesday-2019-torsten-week-21&#34;&gt;
&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/torsten_16.jpg&#34; alt=&#34;best-tidytuesday-2019-torsten-week-16&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;br&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/storytelling.jpg&#34; alt=&#34;best-tidytuesday-2019-storytelling&#34;&gt;&lt;/p&gt;
&lt;p&gt;Contributions to the #TidyTuesday challenge focus on a single or few graphs, rarely on infographics or long and detailed stories. Anyway, by presenting a simple yet convincing chart in an appealing way and using clever annotations, a single chart can give a lot of insights and tell a (short) story and guide the reader.&lt;/p&gt;
&lt;h3 id=&#34;global-plastic-waste-by-christian-burkhart&#34;&gt;Global Plastic Waste by Christian Burkhart&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/Christi58451746&#34; target=&#34;_blank&#34;&gt;Christian Burkhart&lt;/a&gt;s contribution on global plastic waste (&lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2019/2019-05-21&#34; target=&#34;_blank&#34;&gt;week 21&lt;/a&gt;) is not easy to grasp. The scatterplot shows the relationship of the amount of plastic waste and not properly disposed plastic waste per capita. I love how the stripes with different intensities and direct annotations highlight groups of countries that care the most and which doesn&amp;rsquo;t—and those in between:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/tidytuesday?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#tidytuesday&lt;/a&gt; For this tidytuesday I tried to visualize the countries that are really bad at disposing their plastic waste properly. Code can be found here: &lt;a href=&#34;https://t.co/HdnyVbKM7D&#34;&gt;https://t.co/HdnyVbKM7D&lt;/a&gt; &lt;a href=&#34;https://t.co/rWQ7vAkGr9&#34;&gt;&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/christian_21.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&amp;mdash; Christian Burkhart (@Christi58451746) &lt;a href=&#34;https://twitter.com/Christi58451746/status/1132014318747361280?ref_src=twsrc%5Etfw&#34;&gt;May 24, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;Christian is a new member of the #TidyTuesday community but shared several great visualizations such as the one on the European starling. He also is quite active in publishing step-by-step tutorials for specific ggplot charts on his page &lt;a href=&#34;https://ggplot2tutor.com/&#34; target=&#34;_blank&#34;&gt;ggplot2tutor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/christian_25.jpg&#34; alt=&#34;best-tidytuesday-2019-christian-week-25&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;amusement-park-injuries-by-ariane-aumaitre&#34;&gt;Amusement Park Injuries by Ariane Aumaitre&lt;/h3&gt;
&lt;p&gt;With her contribution to week 37 on &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2019/2019-09-10&#34; target=&#34;_blank&#34;&gt;amusement park injuries&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/ariamsita&#34; target=&#34;_blank&#34;&gt;[Ariane Aumaitre&lt;/a&gt; earned a lot of compliments and also a mention on the TidyTuesday Podcast! The line plot is very simple (and I would probably choose different colors here) but the use of annotations of both pictograms and text make sure the reader gets immediately what this plot is about! The impression of a rollercoaster is completed by the elegant use of &amp;ldquo;fake&amp;rdquo; grid lines that serve as girders:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Quick and simple (but I think fun!) contribution for this week&amp;#39;s &lt;a href=&#34;https://twitter.com/hashtag/tidytuesday?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#tidytuesday&lt;/a&gt;. &lt;br&gt;I plotted the age distribution of injuries as a rollercoaster 🎢. Main challenge: doing it without internet connection. Fake gridlines done w/ geom_linerange(), icons added w/ annotation_custom() 😬 &lt;a href=&#34;https://t.co/BGgQPq6gQ8&#34;&gt;&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/ariane_37.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ariane Aumaitre (@ariamsita) &lt;a href=&#34;https://twitter.com/ariamsita/status/1171421023838687232?ref_src=twsrc%5Etfw&#34;&gt;September 10, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;The clever use of pictograms can help to guide the reader. Another good example is her contribution to the Squirrel challenge:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/ariane_44.jpg&#34; alt=&#34;best-tidytuesday-2019-ariane-week-44&#34;&gt;&lt;/p&gt;
&lt;p&gt;I also would like to mention the contributions which are also contained in this blog post: Georgios&amp;rsquo; visualization of UFO sightings or my animated car race below. (However, the use of the Twitter logo to visualize sightings of European starlings may have the opposite effect and mislead the reader. At least, every time it takes a moment for me to realize that Christian is talking about real birds here.)&lt;/p&gt;
&lt;h3 id=&#34;us-student-loan-debt-by-julia-watzek&#34;&gt;US Student Loan Debt by Julia Watzek&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://twitter.com/watzoever&#34; target=&#34;_blank&#34;&gt;Julia Watzek&lt;/a&gt; has chosen two simple chart types to visualize &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/data/2019/2019-11-26&#34; target=&#34;_blank&#34;&gt;student loan debt in the US&lt;/a&gt;: a line chart showing the outstanding debt over time (per quarter) and a stacked bar chart that gives more detailed insights on the paid debts by showing the proportion in total and for four different recovery methods:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/TidyTuesday?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TidyTuesday&lt;/a&gt; 2019-48 • US Student Loan Debt 🎓💸&lt;br&gt;&lt;br&gt;Not sure about all the loan terms, but 1st time using ggtext📦 was a success!&lt;br&gt;&lt;br&gt;Data: US Department of Education&lt;br&gt;Code: &lt;a href=&#34;https://t.co/XfnLSM55mu&#34;&gt;https://t.co/XfnLSM55mu&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/r4ds?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#r4ds&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/dataviz?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#dataviz&lt;/a&gt; &lt;a href=&#34;https://t.co/VTKQFrA5aL&#34;&gt;&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/julia_48.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&amp;mdash; Julia Watzek (@watzoever) &lt;a href=&#34;https://twitter.com/watzoever/status/1199508300959752192?ref_src=twsrc%5Etfw&#34;&gt;November 27, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;What I particularly like about this contribution is the consistent use of colors which make it easy to jump between both panels. This is also supported by the vertical alignment of the two plots. I found Julia&amp;rsquo;s contribution very informative and convincing, while being very simple and clean! From the very beginning, Julia shares high-quality contributions to the #TidyTuesday challenge I especially loved her latest Christmas-themed contribution:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/best-tidytuesday-2019/julia_51.png&#34; alt=&#34;best-tidytuesday-2019-julia-week-51&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;br&gt;
&lt;h3 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;This was a great second year of #TidyTuesday with so many interesting data sets and inspiring visualizations—I am sure I missed a ton of good contributions here! The longer I think about, the harder it gets to pick the favorite three visualizations&amp;hellip; So please don&amp;rsquo;t be mad at me for not mentioning you. Which were your highlights?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Evolution of a ggplot</title>
      <link>http://localhost:1313/2019/05/17/the-evolution-of-a-ggplot/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2019/05/17/the-evolution-of-a-ggplot/</guid>
      <description>


&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/evol-ggplot/evol-ggplot-1.gif&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;aim&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;🏁 Aim of this Tutorial&lt;/h3&gt;
&lt;p&gt;In this blog post, I aim to show you how to turn a default ggplot into a plot that visualizes information in an appealing and easily understandable way. The goal is to provide a step-by-step tutorial explaining how my visualization evolves from a typical basic ggplot. All plots are created with 100% &lt;code&gt;{ggplot2}&lt;/code&gt; and 0% Inkscape.&lt;/p&gt;
&lt;p&gt;We are going to transform a basic box plot into a compelling and self-explanatory combination of a jittered dot strip plot and a lollipop plot. I am going to use &lt;a href=&#34;http://data.uis.unesco.org/index.aspx?queryid=180&#34;&gt;data provided by the UNESCO on global student to teacher ratios&lt;/a&gt; that was selected as data &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-05-07&#34;&gt;for the #TidyTuesday challenge 19 of 2019&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#data&#34;&gt;🗃️ Data Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#default&#34;&gt;🌱 The Default Boxplot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sort&#34;&gt;🔀 ️Sort Your Data!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#polish&#34;&gt;💎 Let Your Plot Shine—Get Rid of the Default Settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#geoms&#34;&gt;📊 The Choice of the Chart Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#more&#34;&gt;💯 More Geoms, More Fun, More Info!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#text&#34;&gt;💬 Add Text Boxes to Let The Plot Speak for Itself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;%7B#legend&#34;&gt;🗺️ Bonus: Add a Tile Map as Legend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#final&#34;&gt;🎄 The Final Evolved Visualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#code&#34;&gt;💻 Complete Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ps&#34;&gt;📝 Post Scriptum: Mean versus Median&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;🗃️ Data Preparation&lt;/h3&gt;
&lt;p&gt;I have prepared the data in the first way to map each country’s most recently reported student-teacher ratio in primary education as a tile map. I used the &lt;a href=&#34;%22https://gist.githubusercontent.com/maartenzam/787498bbc07ae06b637447dbd430ea0a/raw/9a9dafafb44d8990f85243a9c7ca349acd3a0d07/worldtilegrid.csv%22&#34;&gt;tile-based world data provided by Maarten Lambrechts&lt;/a&gt; to create this map as the first visualization for my weekly contribution:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/map-students-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For the second chart next to the tile map, I wanted to highlight the difference of the mean student ratio per continent but without discarding the raw data on the country-level. Therefore, I transformed the information on the region to represent the six continents excluding Antarctica (hm, do penguins not go to school?! Seems so… 🐧) and merged both data sets. If you would like to run the code yourself, you find the data preparation steps &lt;a href=&#34;https://gist.github.com/Z3tt/301bb0c7e3565111770121af2bd60c11&#34;&gt;here&lt;/a&gt;. This is how the relevant columns of the merged and cleaned data set looks like, showing two examples per continent:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 12 × 5
##    indicator         country                          region        student_ratio student_ratio_region
##    &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;                            &amp;lt;chr&amp;gt;                 &amp;lt;dbl&amp;gt;                &amp;lt;dbl&amp;gt;
##  1 Primary Education Lesotho                          Africa                 32.9                 37.3
##  2 Primary Education South Africa                     Africa                 30.3                 37.3
##  3 Primary Education Bangladesh                       Asia                   30.1                 20.7
##  4 Primary Education Viet Nam                         Asia                   19.6                 20.7
##  5 Primary Education Ireland                          Europe                 16.1                 13.6
##  6 Primary Education France                           Europe                 18.2                 13.6
##  7 Primary Education Saint Vincent and the Grenadines North America          14.4                 17.7
##  8 Primary Education Dominican Republic               North America          18.9                 17.7
##  9 Primary Education Vanuatu                          Oceania                26.6                 24.7
## 10 Primary Education Solomon Islands                  Oceania                25.8                 24.7
## 11 Primary Education Argentina                        South America          NA                   19.4
## 12 Primary Education Paraguay                         South America          24.2                 19.4&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;default&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;🌱 The Default Boxplot&lt;/h3&gt;
&lt;p&gt;I was particularly interested to visualize the most-recent student-teacher ratio in primary education as a tile grid map per country. A usual way representing several data points per group is to use a box plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

ggplot(df_ratios, aes(x = region, y = student_ratio)) +
  geom_boxplot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/boxplot-basic-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sort&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;🔀 ️Sort Your Data!&lt;/h3&gt;
&lt;p&gt;A good routine with such kind of data (qualitative and unsorted) is to arrange the box plots or any other type such as bars or violins in an in- or decreasing order to simplify readability. Since the category “continent” does not have an intrinsic order, I rearrange the box plots by their mean student-teacher ratio instead of sorting them alphabetically which is the default:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df_sorted &amp;lt;-
  df_ratios %&amp;gt;%
  mutate(region = fct_reorder(region, -student_ratio_region))

ggplot(df_sorted, aes(x = region, y = student_ratio)) +
  geom_boxplot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/boxplot-sorted-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;Sort your data according to the best or worst, highest or lowest value to make your graph easily readable—do not sort them if the categories have an internal logical ordering, e.g. age groups or income classes!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To increase the readability we are going to flip the coordinates (note that we could also switch the variables mapped to x and y in the &lt;code&gt;ggplot&lt;/code&gt; call &lt;s&gt;but this does not work for box plots so we use &lt;code&gt;coord_flip()&lt;/code&gt;&lt;/s&gt; and it now also works for box plots!). As some ratios are pretty close to zero, it might be also a good idea to include the 0 on the y axis. I also add some space to the right (mostly for later) which we can force by adding &lt;code&gt;scale_y_continuous(limits = c(0, 90))&lt;/code&gt; (be cautious here to use limits that are beyond the limits of your data—or better use &lt;code&gt;coord_*(ylim = c(0, 90)&lt;/code&gt; so you’re not accidentally subsetting your data).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(df_sorted, aes(x = region, y = student_ratio)) +
  geom_boxplot() +
  coord_flip() +
  scale_y_continuous(limits = c(0, 90))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/boxplot-flipped-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;Flip the chart in case of long labels to increase readability and to avoid overlapping or rotated labels!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;Since the latest version 3.x.x of &lt;code&gt;{ggplot2}&lt;/code&gt; you can also flip the orientation by switching the x and y variables:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(df_sorted, aes(x = student_ratio, y = region)) +
  geom_boxplot() +
  scale_x_continuous(limits = c(0, 90))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The order of the categories is perfect as it is after flipping the coordinates—the lower the student-teacher ratio, the better.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;let-your-plot-shineget-rid-of-the-default-settings&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;💎 Let Your Plot Shine—Get Rid of the Default Settings&lt;/h3&gt;
&lt;p&gt;Let’s spice this plot up! One great thing about &lt;code&gt;{ggplot2}&lt;/code&gt; is that it is structured in an &lt;em&gt;adaptive way&lt;/em&gt;, allowing to add further levels to an existing ggplot object. We are going to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use a different theme that comes with the &lt;code&gt;{ggplot2}&lt;/code&gt; package by calling &lt;code&gt;theme_set(theme_light())&lt;/code&gt; (several themes come along with the &lt;code&gt;{ggplot2}&lt;/code&gt; package but if you need more check for example the packages &lt;a href=&#34;https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/&#34;&gt;&lt;code&gt;{ggthemes}&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://hrbrmstr.github.io/hrbrthemes/&#34;&gt;&lt;code&gt;hrbrthemes&lt;/code&gt;&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;change the font and the overall font size by adding the arguments &lt;code&gt;base_size&lt;/code&gt; and &lt;code&gt;base_family&lt;/code&gt; to &lt;code&gt;theme_light()&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;flip the axes by adding &lt;code&gt;coord_flip()&lt;/code&gt; (as seen before),&lt;/li&gt;
&lt;li&gt;let the axis start at 0 and reduce the spacing to the plot margin by adding &lt;code&gt;expand = c(0.02, 0.02)&lt;/code&gt; as argument to the &lt;code&gt;scale_y_continious()&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;add some color encoding the continent by adding &lt;code&gt;color = region&lt;/code&gt; to the &lt;code&gt;aes&lt;/code&gt; argument and picking a palette from the &lt;a href=&#34;https://cran.r-project.org/web/packages/ggsci/vignettes/ggsci.html&#34;&gt;&lt;code&gt;{ggsci}&lt;/code&gt; package&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;add meaningful labels/removing useless labels by adding &lt;code&gt;labs(x = NULL, y = &#34;title y&#34;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;adjust the new theme (e.g. changing some font settings and removing the legend and grid) by adding &lt;code&gt;theme()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;💡 &lt;strong&gt;You can easily adjust all sizes of the theme by calling &lt;code&gt;theme_*(base_size = )&lt;/code&gt;—this is very handy if you need the same viz for a different purpose!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;Do not use &lt;code&gt;c(0, 0)&lt;/code&gt; since the zero tick is in most cases too close to the axis—use something close to zero instead!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I am going to save the ggplot call and all these visual adjustments in a &lt;code&gt;gg&lt;/code&gt; object that I name &lt;code&gt;g&lt;/code&gt; so we can use it for the next plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;theme_set(theme_light(base_size = 18, base_family = &amp;quot;Poppins&amp;quot;))

g &amp;lt;-
  ggplot(df_sorted, aes(x = region, y = student_ratio, color = region)) +
    coord_flip() +
    scale_y_continuous(limits = c(0, 90), expand = c(0.02, 0.02)) +
    scale_color_uchicago() +
    labs(x = NULL, y = &amp;quot;Student to teacher ratio&amp;quot;) +
    theme(
      legend.position = &amp;quot;none&amp;quot;,
      axis.title = element_text(size = 16),
      axis.text.x = element_text(family = &amp;quot;Roboto Mono&amp;quot;, size = 12),
      panel.grid = element_blank()
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even thought we already wrote a lot of code, the plot &lt;code&gt;g&lt;/code&gt; is just an empty plot until with a custom theme and pretty axes but actually not a “data visualization” yet.&lt;/p&gt;
&lt;p&gt;(Note that to include these fonts we make use of the &lt;s&gt;&lt;a href=&#34;https://github.com/wch/extrafont&#34;&gt;&lt;code&gt;{extrafont}&lt;/code&gt; package&lt;/a&gt;&lt;/s&gt; &lt;s&gt;&lt;a href=&#34;https://github.com/yixuan/showtext&#34;&gt;&lt;code&gt;{showtext}&lt;/code&gt; package&lt;/a&gt;&lt;/s&gt; &lt;a href=&#34;https://cran.r-project.org/web/packages/systemfonts/index.html&#34;&gt;{systemfonts} package&lt;/a&gt;. This package allows for the use of system fonts without the need to import or register fonts. And it even allows to use various font weights and styles, to turn on ligatures and much more. You need to have (a) the fonts installed on your system and (b) the package &lt;code&gt;systemfonts&lt;/code&gt; installed. Read more about how to use custom fonts in &lt;a href=&#34;https://yjunechoe.github.io/posts/2021-06-24-setting-up-and-debugging-custom-fonts/&#34;&gt;this blog post by June Choe&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;geoms&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;📊 The Choice of the Chart Type&lt;/h3&gt;
&lt;p&gt;We can add any &lt;code&gt;geom_&lt;/code&gt; to our ggplot-preset &lt;code&gt;g&lt;/code&gt; that fits the data, i.e. that take two positional variables of which one is allowed to be qualitative. Here are some examples that fulfill these criteria:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/geoms-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;All of the four chart types let readers explore the range of values but with different detail and focus. The box plot and the violin plot both summarize the data, they contain a lot of information by visualizing the distribution of the data points in two different ways (see below for an explanation &lt;a href=&#34;https://www.cedricscherer.com/2019/05/17/the-evolution-of-a-ggplot-ep.-1/#ps&#34;&gt;how to read a boxplot&lt;/a&gt;). By contrast, the line plot shows only the range (minimum and maximum of the data) and the strip plot the raw data with each single observation. However, a line chart is not a good choice here since it does not allow for the identification of single countries. By adding an &lt;code&gt;alpha&lt;/code&gt; argument to &lt;code&gt;geom_point()&lt;/code&gt;, the strip plot is able to highlight the main range of student-teacher ratios while also showing the raw data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g + geom_point(size = 3, alpha = 0.15)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/strip-plot-alpha-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Of course, different geoms can also be combined to provide even more information in one plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g +
  geom_boxplot(color = &amp;quot;gray60&amp;quot;, outlier.alpha = 0) +
  geom_point(size = 3, alpha = 0.15)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/box-dot-plot-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;⚡ &lt;strong&gt;Remove the outliers of the box plot to avoid double-encoding of the same information! You can achieve this via &lt;code&gt;outlier.alpha = 0&lt;/code&gt;, &lt;code&gt;outlier.color = NA&lt;/code&gt;, &lt;code&gt;outlier.color = &#34;transparent&#34;&lt;/code&gt;, or &lt;code&gt;outlier.shape = NA&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are going to stick to points to visualize the countries explicitly instead of aggregating the data into box or violin plots.
To achieve a higher readability, we use another geom, &lt;code&gt;geom_jitter()&lt;/code&gt; which scatters the points in a given direction (x and/or y via &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;) to prevent over-plotting:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;set.seed(2019)

g + geom_jitter(size = 2, alpha = 0.25, width = 0.2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/plot-jitter-countries-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;Set a seed to keep the jittering of the points fixed every time you call &lt;code&gt;geom_jitter()&lt;/code&gt; by calling &lt;code&gt;set.seed()&lt;/code&gt;—this becomes especially important when we later label some of the points.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;You can also set the seed within the &lt;code&gt;geom_jitter()&lt;/code&gt; call by setting &lt;code&gt;position = position_jitter(seed)&lt;/code&gt;. Note that in this case the &lt;code&gt;width&lt;/code&gt; and/or &lt;code&gt;height&lt;/code&gt; argument needs to be placed inside the &lt;code&gt;position_jitter()&lt;/code&gt; function as well:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g + geom_jitter(position = position_jitter(seed = 2019, width = 0.2), size = 2, alpha = 0.25)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(In the next code chunks, I am going to use the redundant call of &lt;code&gt;set.seed(2019)&lt;/code&gt; before creating the plot but do not show it each time.)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;more&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;💯 More Geoms, More Fun, More Info!&lt;/h3&gt;
&lt;p&gt;As mentioned in the beginning, my intention was to visualize both, the country- and continental-level ratios, in addition to the tile map. Until now, we focused on countries only. We can indicate the continental average by adding a summary statistic via &lt;code&gt;stat_summary()&lt;/code&gt;with a different point size as the points of &lt;code&gt;geom_jitter()&lt;/code&gt;. Since the average is more important here, I am going to highlight it with a bigger size and zero transparency:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g +
  geom_jitter(size = 2, alpha = 0.25, width = 0.2) +
  stat_summary(fun = mean, geom = &amp;quot;point&amp;quot;, size = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/plot-jitter-regions-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note that we could also use &lt;code&gt;geom_point(aes(x = region, y = student_ratio_region), size = 5)&lt;/code&gt; to achieve the same since we already have a regional mean average in our data.&lt;/p&gt;
&lt;p&gt;To relate all these points to a baseline, we add a line indicating the worldwide average:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;world_avg &amp;lt;-
  df_ratios %&amp;gt;%
  summarize(avg = mean(student_ratio, na.rm = TRUE)) %&amp;gt;%
  pull(avg)

g +
  geom_hline(aes(yintercept = world_avg), color = &amp;quot;gray70&amp;quot;, size = 0.6) +
  stat_summary(fun = mean, geom = &amp;quot;point&amp;quot;, size = 5) +
  geom_jitter(size = 2, alpha = 0.25, width = 0.2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/worldwide-avg-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;One could derive the worldwide average also within the &lt;code&gt;geom_hline()&lt;/code&gt; call, but I prefer to keep both steps separated.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We can further highlight that the baseline is the worldwide average ratio rather than a ratio of 0 (or 1?) by adding a line from each continental average to the worldwide average. The result is a combination of a jitter and a lollipop plot:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g +
  geom_segment(
    aes(x = region, xend = region,
        y = world_avg, yend = student_ratio_region),
    size = 0.8
  ) +
  geom_hline(aes(yintercept = world_avg), color = &amp;quot;gray70&amp;quot;, size = 0.6) +
  geom_jitter(size = 2, alpha = 0.25, width = 0.2) +
  stat_summary(fun = mean, geom = &amp;quot;point&amp;quot;, size = 5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/plot-jitter-regions-world-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;⚡ &lt;strong&gt;Check the order of the geoms to prevent any overlapping—here, for example, draw the line after calling &lt;code&gt;geom_segment()&lt;/code&gt; to avoid overlapping!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;text&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;💬 Add Text Boxes to Let The Plot Speak for Itself&lt;/h3&gt;
&lt;p&gt;Since I don’t want to include legends, I add some text boxes that explain the different point sizes and the baseline level via &lt;code&gt;annotate(geom = &#34;text&#34;)&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(g_text &amp;lt;-
  g +
  geom_segment(
    aes(x = region, xend = region,
        y = world_avg, yend = student_ratio_region),
    size = 0.8
  ) +
  geom_hline(aes(yintercept = world_avg), color = &amp;quot;gray70&amp;quot;, size = 0.6) +
  stat_summary(fun = mean, geom = &amp;quot;point&amp;quot;, size = 5) +
  geom_jitter(size = 2, alpha = 0.25, width = 0.2) +
  annotate(
    &amp;quot;text&amp;quot;, x = 6.3, y = 35, family = &amp;quot;Poppins&amp;quot;, size = 2.8, color = &amp;quot;gray20&amp;quot;, lineheight = .9,
    label = glue::glue(&amp;quot;Worldwide average:\n{round(world_avg, 1)} students per teacher&amp;quot;)
  ) +
  annotate(
    &amp;quot;text&amp;quot;, x = 3.5, y = 10, family = &amp;quot;Poppins&amp;quot;, size = 2.8, color = &amp;quot;gray20&amp;quot;,
    label = &amp;quot;Continental average&amp;quot;
  ) +
  annotate(
    &amp;quot;text&amp;quot;, x = 1.7, y = 11, family = &amp;quot;Poppins&amp;quot;, size = 2.8, color = &amp;quot;gray20&amp;quot;,
    label = &amp;quot;Countries per continent&amp;quot;
  ) +
  annotate(
    &amp;quot;text&amp;quot;, x = 1.9, y = 64, family = &amp;quot;Poppins&amp;quot;, size = 2.8, color = &amp;quot;gray20&amp;quot;, lineheight = .9,
    label = &amp;quot;The Central African Republic has by far\nthe most students per teacher&amp;quot;)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/text-labels-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;You could also create a new data set (similar to our &lt;code&gt;arrows&lt;/code&gt; data frame below) that holds the labels and the exact position, along with some other information if needed, and add that via &lt;code&gt;geom_text(data = my_labels, aes(label = my_label_column))&lt;/code&gt;. Note that here we also would need to create a factor for the region to match the original data!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;Use &lt;a href=&#34;https://glue.tidyverse.org/&#34;&gt;&lt;code&gt;glue::glue()&lt;/code&gt;&lt;/a&gt; to combine strings with variables—this way, you can update your plots without copying and pasting values! (Of course, you can also use your good old friend &lt;code&gt;paste0()&lt;/code&gt;.)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;… and add some arrows to match the text to the visual elements by providing start- and endpoints of the arrows when calling &lt;code&gt;geom_curve()&lt;/code&gt;. I am going to draw all arrows with one call—but you could also draw arrow by arrow. This is not that simple as the absolute position depends on the dimension of the plot. Good guess based on the coordinates of the text boxes…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;arrows &amp;lt;-
  tibble(
    x1 = c(6.2, 3.5, 1.7, 1.7, 1.9),
    x2 = c(5.6, 4, 1.9, 2.9, 1.1),
    y1 = c(35, 10, 11, 11, 73),
    y2 = c(world_avg, 19.4, 14.16, 12, 83.4)
  )

g_text +
  geom_curve(
    data = arrows, aes(x = x1, y = y1, xend = x2, yend = y2),
    arrow = arrow(length = unit(0.07, &amp;quot;inch&amp;quot;)), size = 0.4,
    color = &amp;quot;gray20&amp;quot;, curvature = -0.3
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/arrows-annotations-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;… and then adjust, adjust, adjust…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;arrows &amp;lt;-
  tibble(
    x1 = c(6.1, 3.62, 1.8, 1.8, 1.8),
    x2 = c(5.6, 4, 2.18, 2.76, 0.9),
    y1 = c(world_avg + 6, 10.5, 9, 9, 77),
    y2 = c(world_avg + 0.1, 18.4, 14.16, 12, 83.45)
  )

(g_arrows &amp;lt;-
  g_text +
  geom_curve(
    data = arrows, aes(x = x1, y = y1, xend = x2, yend = y2),
    arrow = arrow(length = unit(0.08, &amp;quot;inch&amp;quot;)), size = 0.5,
    color = &amp;quot;gray20&amp;quot;, curvature = -0.3
  )
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/text-arrows-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;💡 &lt;strong&gt;Since the curvature is the same for all arrows, one can use different x and y distances and directions between the start end and points to vary their shape!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One last thing that bothers me: A student-teacher ratio of 0 does not make much sense—I definitely prefer to start at a ratio of 1!&lt;br /&gt;
And—oh my!—we almost forgot to mention and acknowledge the data source 😨 Let’s quickly also add a plot caption:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(g_final &amp;lt;-
  g_arrows +
  scale_y_continuous(
    limits = c(1, NA), expand = c(0.02, 0.02),
    breaks = c(1, seq(20, 80, by = 20))
  ) +
  labs(caption = &amp;quot;Data: UNESCO Institute for Statistics&amp;quot;) +
  theme(plot.caption = element_text(size = 9, color = &amp;quot;gray50&amp;quot;))
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/final-caption-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;legend&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;🗺️ Bonus: Add a Tile Map as Legend&lt;/h3&gt;
&lt;p&gt;To make it easier to match the countries of the second plot, the country-level tile map, to each continent we have visualized with our jitter plot, we can add a geographical “legend”. For this, I encode the region by color instead by the country-level ratios:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(map_regions &amp;lt;-
  df_sorted %&amp;gt;%
  ggplot(aes(x = x, y = y, fill = region, color = region)) +
    geom_tile(color = &amp;quot;white&amp;quot;) +
    scale_y_reverse() +
    ggsci::scale_fill_uchicago(guide = &amp;quot;none&amp;quot;) +
    coord_equal() +
    theme(line = element_blank(),
          panel.background = element_rect(fill = &amp;quot;transparent&amp;quot;),
          plot.background = element_rect(fill = &amp;quot;transparent&amp;quot;, color = &amp;quot;transparent&amp;quot;),
          panel.border = element_rect(color = &amp;quot;transparent&amp;quot;),
          strip.background = element_rect(color = &amp;quot;gray20&amp;quot;),
          axis.text = element_blank(),
          plot.margin = margin(0, 0, 0, 0)) +
    labs(x = NULL, y = NULL)
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/map-regions-1.png&#34; width=&#34;624&#34; /&gt;&lt;/p&gt;
&lt;p&gt;… and add this map to the existing plot via &lt;code&gt;annotation_custom(ggplotGrob())&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;g_final +
  annotation_custom(ggplotGrob(map_regions), xmin = 2.5, xmax = 7.5, ymin = 52, ymax = 82)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/plot-with.map-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;🎄 The Final Evolved Visualization&lt;/h3&gt;
&lt;p&gt;And here it is, our final plot—evolved from a dreary gray box plot to a self-explanatory, colorful visualization including the raw data and a tile map legend! 🎉&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/plot-before-after-1.png&#34; width=&#34;1536&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Thanks for reading, I hope you’ve enjoyed it! Here you find &lt;a href=&#34;https://www.cedricscherer.com/top/dataviz/&#34;&gt;more visualizations I’ve contributed to the #TidyTuesday challenges&lt;/a&gt; including my full contribution to week 19 of 2019 we have dissected here:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/tidytuesday/2019_19_StudentTeacher.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;code&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;💻 Complete Code&lt;/h3&gt;
&lt;p&gt;If you want to create the plot on your own or play around with the code, copy and paste these ~60 lines:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## packages
library(tidyverse)
library(ggsci)
library(showtext)

## load fonts
font_add_google(&amp;quot;Poppins&amp;quot;, &amp;quot;Poppins&amp;quot;)
font_add_google(&amp;quot;Roboto Mono&amp;quot;, &amp;quot;Roboto Mono&amp;quot;)
showtext_auto()

## get data
devtools::source_gist(&amp;quot;https://gist.github.com/Z3tt/301bb0c7e3565111770121af2bd60c11&amp;quot;)

## tile map as legend
map_regions &amp;lt;-
  df_ratios %&amp;gt;%
  mutate(region = fct_reorder(region, -student_ratio_region)) %&amp;gt;%
  ggplot(aes(x = x, y = y, fill = region, color = region)) +
    geom_tile(color = &amp;quot;white&amp;quot;) +
    scale_y_reverse() +
    scale_fill_uchicago(guide = &amp;quot;none&amp;quot;) +
    coord_equal() +
    theme_light() +
    theme(
      line = element_blank(),
      panel.background = element_rect(fill = &amp;quot;transparent&amp;quot;),
      plot.background = element_rect(fill = &amp;quot;transparent&amp;quot;,
                                     color = &amp;quot;transparent&amp;quot;),
      panel.border = element_rect(color = &amp;quot;transparent&amp;quot;),
      strip.background = element_rect(color = &amp;quot;gray20&amp;quot;),
      axis.text = element_blank(),
      plot.margin = margin(0, 0, 0, 0)
    ) +
    labs(x = NULL, y = NULL)

## calculate worldwide average
world_avg &amp;lt;-
  df_ratios %&amp;gt;%
  summarize(avg = mean(student_ratio, na.rm = TRUE)) %&amp;gt;%
  pull(avg)

## coordinates for arrows
arrows &amp;lt;-
  tibble(
    x1 = c(6, 3.65, 1.8, 1.8, 1.8),
    x2 = c(5.6, 4, 2.18, 2.76, 0.9),
    y1 = c(world_avg + 6, 10.5, 9, 9, 77),
    y2 = c(world_avg + 0.1, 18.4, 14.16, 12, 83.42)
  )

## final plot
## set seed to fix position of jittered points
set.seed(2019)

## final plot
df_ratios %&amp;gt;%
  mutate(region = fct_reorder(region, -student_ratio_region)) %&amp;gt;%
  ggplot(aes(x = region, y = student_ratio, color = region)) +
    geom_segment(
      aes(x = region, xend = region,
          y = world_avg, yend = student_ratio_region),
      size = 0.8
    ) +
    geom_hline(aes(yintercept = world_avg), color = &amp;quot;gray70&amp;quot;, size = 0.6) +
    stat_summary(fun = mean, geom = &amp;quot;point&amp;quot;, size = 5) +
    geom_jitter(size = 2, alpha = 0.25, width = 0.2) +
    coord_flip() +
    annotate(
      &amp;quot;text&amp;quot;, x = 6.3, y = 35, family = &amp;quot;Poppins&amp;quot;,
      size = 2.7, color = &amp;quot;gray20&amp;quot;,
      label = glue::glue(&amp;quot;Worldwide average:\n{round(world_avg, 1)} students per teacher&amp;quot;)
    ) +
    annotate(
      &amp;quot;text&amp;quot;, x = 3.5, y = 10, family = &amp;quot;Poppins&amp;quot;,
      size = 2.7, color = &amp;quot;gray20&amp;quot;,
      label = &amp;quot;Continental average&amp;quot;
    ) +
    annotate(
      &amp;quot;text&amp;quot;, x = 1.7, y = 11, family = &amp;quot;Poppins&amp;quot;,
      size = 2.7, color = &amp;quot;gray20&amp;quot;,
      label = &amp;quot;Countries per continent&amp;quot;
    ) +
    annotate(
      &amp;quot;text&amp;quot;, x = 1.9, y = 64, family = &amp;quot;Poppins&amp;quot;,
      size = 2.7, color = &amp;quot;gray20&amp;quot;,
      label = &amp;quot;The Central African Republic has by far\nthe most students per teacher&amp;quot;
    ) +
    geom_curve(
      data = arrows, aes(x = x1, xend = x2,
                         y = y1, yend = y2),
      arrow = arrow(length = unit(0.08, &amp;quot;inch&amp;quot;)), size = 0.5,
      color = &amp;quot;gray20&amp;quot;, curvature = -0.3#
    ) +
    annotation_custom(
      ggplotGrob(map_regions),
      xmin = 2.5, xmax = 7.5, ymin = 52, ymax = 82
    ) +
    scale_y_continuous(
      limits = c(1, NA), expand = c(0.02, 0.02),
      breaks = c(1, seq(20, 80, by = 20))
    ) +
    scale_color_uchicago() +
    labs(
      x = NULL, y = &amp;quot;Student to teacher ratio&amp;quot;,
      caption = &amp;#39;Data: UNESCO Institute for Statistics&amp;#39;
    ) +
    theme_light(base_size = 18, base_family = &amp;quot;Poppins&amp;quot;) +
    theme(
      legend.position = &amp;quot;none&amp;quot;,
      axis.title = element_text(size = 12),
      axis.text.x = element_text(family = &amp;quot;Roboto Mono&amp;quot;, size = 10),
      plot.caption = element_text(size = 9, color = &amp;quot;gray50&amp;quot;),
      panel.grid = element_blank()
    )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ps&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;📝 Post Scriptum: Mean versus Median&lt;/h3&gt;
&lt;p&gt;One thing I want to highlight is that the final plot does not contain the same information as the original box plot. While I have visualized the mean values of each country and across the globe, the box of a Box-and-Whisker plot represents the 25th, 50th, 75th percentile of the data (also known as first, second and third quartile):&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;http://localhost:1313/img/evol-ggplot/boxplot.png&#34; alt=&#34;&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;In a Box-and-Whisker plot the box visualizes the upper and lower quartiles, so the box spans the interquartile range (IQR) containing 50 percent of the data, and the median is marked by a vertical line inside the box.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The 2nd quartile is known as the &lt;strong&gt;median&lt;/strong&gt;, i.e. 50% of the data points fall below this value and the other 50% are higher than this value. My decision to estimate the mean value was based on the fact that my aim was a visualization that is easily understandable to a large (non-scientific) audience that are used to mean (“average”) values but not to median estimates. However, in case of skewed data, the mean value of a data set is also biased towards higher or lower values. Let’s compare both a plot based on the mean and the median:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/mean-vs-median-1.png&#34; width=&#34;816&#34; /&gt;&lt;img src=&#34;http://localhost:1313/post/2019-05-17-evol-ggplot-1_files/figure-html/mean-vs-median-2.png&#34; width=&#34;816&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As one can see, the differences between continents stay roughly the same but the worldwide median is lower than the worldwide average (19.6 students per teacher versus 23.5). The plot with medians highlights that the median student-teacher ratio of Asia and Oceania are similar to the worldwide median. This plot now resembles much more the basic box plot we used in the beginning but may be harder to interpret for some compared to the one visualizing average ratios.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hello, TidyTuesday!</title>
      <link>http://localhost:1313/2019/05/06/tidytuesday_intro/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2019/05/06/tidytuesday_intro/</guid>
      <description>&lt;p style=&#34;font-size:14px&#34;&gt;Header image by &lt;a href=&#34;https://www.instagram.com/richard.strozynski/?hl=en&#34;&gt;Richard Strozynski&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;During my after-thesis-vacation, I managed to tick off two long-term todo&amp;rsquo;s on my list - set up a homepage and to participate in the &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/blob/master/README.md&#34;&gt;#TidyTuesday challenge&lt;/a&gt; to strengthen my data science and visualization skills and share my work and code tricks with the amazing Rstats community on Twitter. The #TidyTuesday challenge is a excellent opportunity to do so!&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;what-is-it-about&#34;&gt;What is it about?&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://twitter.com/r4dscommunity&#34;&gt;R4DS (&amp;ldquo;R for Data Science&amp;rdquo;) online learning community&lt;/a&gt; founded by &lt;a href=&#34;https://www.jessemaegan.com/&#34;&gt;Jesse Maegan&lt;/a&gt; is a great opportunity to train skills related to data wrangling and visualization and forms a network of mentors and learners. One of the first projects born out of this collaboration is #TidyTuesday - &lt;strong&gt;a weekly social data project that focusses on understanding how to summarize and arrange data to make meaningful charts with &lt;code&gt;{ggplot2}&lt;/code&gt;, &lt;code&gt;{tidyr}&lt;/code&gt;, &lt;code&gt;{dplyr}&lt;/code&gt; and other tools in the &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;&lt;code&gt;{tidyverse}&lt;/code&gt;&lt;/a&gt; ecosystem&lt;/strong&gt; founded by &lt;a href=&#34;https://thomasmock.netlify.com/&#34;&gt;Thomas Mock&lt;/a&gt;. The intent is to provide a safe and supportive forum to practice their wrangling and data visualization skills.&lt;/p&gt;
&lt;p&gt;Every Tuesday, R enthusiasts from all over the world clean, wrangle, tidy and visualize a new data set and &lt;a href=&#34;https://twitter.com/hashtag/tidytuesday&#34;&gt;share it on Twitter using the hashtag #TidyTuesday&lt;/a&gt;. I follow the challenges quite some time and I am amazed by the high-quality visualizations some contributors share on their Twitter (check for example the work of &lt;a href=&#34;https://twitter.com/committedtotape/media&#34;&gt;David Smale&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/harrocyranka/media&#34;&gt;Harro Cyranka&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jakekaupp/media&#34;&gt;Jake Kaupp&lt;/a&gt; to name a few) but I during the PhD Thesis I always felt bad starting such a fun project. Since I submitted my thesis a few weeks ago and since I was anyway running deeper and deeper down the &lt;code&gt;{tidyverse}&lt;/code&gt; hole during the PhD project, using their packages for all nearly all steps from data processing to statistical modelling and plotting, I finally gave it a try!&lt;/p&gt;
&lt;h3 id=&#34;first-contribution-week-17&#34;&gt;First Contribution: Week 17&lt;/h3&gt;
&lt;p&gt;Highly motivated I opened the &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-04-23&#34;&gt;challenge of the current week (Week 17)&lt;/a&gt; - and what a bummer, my first contribution had to focus on anime data, one of the least favorite genres in my life. So I decided to subset the data to the only anime I know by heart: the lovely crafted Studio Ghibli movies which my partner is a big fan of (I mean, we even have a Totoro drawing hanging in our flat&amp;hellip;)!&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Finally time for &lt;a href=&#34;https://twitter.com/hashtag/TidyTuesday?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TidyTuesday&lt;/a&gt; after submitting the thesis 😎 I am not really following the &lt;a href=&#34;https://twitter.com/hashtag/anime?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#anime&lt;/a&gt; genre so I picked the only anime I know by heart - &lt;a href=&#34;https://twitter.com/StudioGhibli?ref_src=twsrc%5Etfw&#34;&gt;@StudioGhibli&lt;/a&gt;🐉&lt;br&gt;Code: &lt;a href=&#34;https://t.co/laRPpWPPE7&#34;&gt;https://t.co/laRPpWPPE7&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/r4ds?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#r4ds&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/dataviz?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#dataviz&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/ggplot2?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ggplot2&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/tidyverse?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#tidyverse&lt;/a&gt; &lt;a href=&#34;https://t.co/WURUB94ymz&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/z3tt/TidyTuesday/main/plots/2019_17/2019_17_animes.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&amp;mdash; Cédric Scherer (@CedScherer) &lt;a href=&#34;https://twitter.com/CedScherer/status/1120740037119946752?ref_src=twsrc%5Etfw&#34;&gt;April 23, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;h3 id=&#34;catching-up-week-14-and-16&#34;&gt;Catching Up: Week 14 and 16&lt;/h3&gt;
&lt;p&gt;From this moment on, I was addicted and picked two other datasets, one on &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-04-02&#34;&gt;bike traffic in Seattle&lt;/a&gt; (Week 14):&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Catching up with the folks of &lt;a href=&#34;https://twitter.com/R4DScommunity?ref_src=twsrc%5Etfw&#34;&gt;@R4DScommunity&lt;/a&gt; and the &lt;a href=&#34;https://twitter.com/hashtag/TidyTuesday?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TidyTuesday&lt;/a&gt; 📊 and picking the 🍒of the previous challenges! Visualization of seasonal trends in 🚴‍♀️ traffic in Seattle based on time of the day, month, and weekday/weekend.&lt;br&gt;&lt;a href=&#34;https://twitter.com/hashtag/dataviz?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#dataviz&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/r4ds?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#r4ds&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/tidyverse?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#tidyverse&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/ggplot2?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ggplot2&lt;/a&gt; &lt;a href=&#34;https://t.co/agGfEoZtSR&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/z3tt/TidyTuesday/main/plots/2019_14/2019_14_SeattleBikes_month.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&amp;mdash; Cédric Scherer (@CedScherer) &lt;a href=&#34;https://twitter.com/CedScherer/status/1120992373302071296?ref_src=twsrc%5Etfw&#34;&gt;April 24, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;&amp;hellip; and &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-04-16&#34;&gt;several data sets&lt;/a&gt; in that were part of the inspiring &lt;a href=&#34;https://medium.economist.com/mistakes-weve-drawn-a-few-8cdd8a42d368?gi=8b5700cad420&#34;&gt;article &amp;ldquo;Mistakes, we’ve drawn a few - Learning from our errors in data visualisation&amp;rdquo; by The Economist&lt;/a&gt; (Week 16):&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I can&amp;#39;t stop! 🤓 Another &lt;a href=&#34;https://twitter.com/hashtag/TidyTuesday?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TidyTuesday&lt;/a&gt; contribution to catch up - week 2019-16. I tried to improve a few of the &amp;quot;mistakes that &lt;a href=&#34;https://twitter.com/TheEconomist?ref_src=twsrc%5Etfw&#34;&gt;@TheEconomist&lt;/a&gt; has drawn&amp;quot; 📊📈 Article by &lt;a href=&#34;https://twitter.com/MissSarahLeo?ref_src=twsrc%5Etfw&#34;&gt;@MissSarahLeo&lt;/a&gt;: &lt;a href=&#34;https://t.co/ufVhnMU94Z&#34;&gt;https://t.co/ufVhnMU94Z&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://twitter.com/hashtag/dataviz?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#dataviz&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/r4ds?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#r4ds&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/tidyverse?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#tidyverse&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/ggplot2?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ggplot2&lt;/a&gt; &lt;a href=&#34;https://t.co/jxUnYzqXR6&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/z3tt/TidyTuesday/main/plots/2019_16/2019_16_DataVizMistakes_light.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&amp;mdash; Cédric Scherer (@CedScherer) &lt;a href=&#34;https://twitter.com/CedScherer/status/1121753785339142145?ref_src=twsrc%5Etfw&#34;&gt;April 26, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;I decided to stick to the overall theme as a collection of data viz which I may put together as a poster of my highlights - or maybe not. At some point, however, I likely going to use a different theme or a theme which fits the data more each week.&lt;/p&gt;
&lt;h3 id=&#34;latest-contribution-week-18&#34;&gt;Latest Contribution: Week 18&lt;/h3&gt;
&lt;p&gt;And finally my contribution to the challenge last week with a data set from a &lt;a href=&#34;https://royalsocietypublishing.org/doi/10.1098/rspb.2019.0364#d3e550&#34;&gt;study of Winger et al. (2019)&lt;/a&gt; on &lt;a href=&#34;https://github.com/rfordatascience/tidytuesday/tree/master/data/2019/2019-04-30&#34;&gt;bird collisions in Chicago&lt;/a&gt; (Week 18):&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;&lt;a href=&#34;https://twitter.com/hashtag/TidyTuesday?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#TidyTuesday&lt;/a&gt; challenge 2019-18:  What drives collision risk in nocturnally migrating &lt;a href=&#34;https://twitter.com/hashtag/passerine?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#passerine&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/birds?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#birds&lt;/a&gt;? 🏫🕊️&lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;&lt;br&gt;#rstats&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/dataviz?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#dataviz&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/tidyverse?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#tidyverse&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/r4ds?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#r4ds&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/ggplot2?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#ggplot2&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/birdmigration?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#birdmigration&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/Chicago?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#Chicago&lt;/a&gt; &lt;br&gt;Original article: &lt;a href=&#34;https://t.co/eqSKr4eFZl&#34;&gt;https://t.co/eqSKr4eFZl&lt;/a&gt; &lt;a href=&#34;https://t.co/A9wfmBdOl1&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/z3tt/TidyTuesday/main/plots/2019_18/2019_18_BirdCollisions.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&amp;mdash; Cédric Scherer (@CedScherer) &lt;a href=&#34;https://twitter.com/CedScherer/status/1123331096429641731?ref_src=twsrc%5Etfw&#34;&gt;April 30, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;You can find all these and upcoming  #TidyTuesday contributions in the &lt;a href=&#34;https://www.cedricscherer.com/top/dataviz/&#34;&gt;Visualization section&lt;/a&gt; and the corresponding codes on &lt;a href=&#34;https://github.com/Z3tt/TidyTuesday&#34;&gt;my GitHub page&lt;/a&gt;! In future blog posts, I am going to share some thoughts on why I picked a given chart type, which color palettes I use and some tips and tricks of styling your ggplots - stay tuned 🤓&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
